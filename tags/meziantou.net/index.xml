<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 30 Sep 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Disabling HSTS for localhost using a browser extension</title>
      <link>https://www.dotnetramblings.com/post/30_09_2024/30_09_2024_0/</link>
      <pubDate>Mon, 30 Sep 2024 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_09_2024/30_09_2024_0/</guid>
      <description>
        
          
            Http Strict Transport Security (HSTS) is a security mechanism that instructs the browser to automatically redirect http requests to https before sending a request to the server. When you are developing a web application, you should disable HSTS for localhost. This is because enabling HSTS on localhost has implications for other applications. For instance, some applications start a local web server and…
Link to article: https://www.meziantou.net/avoid-hsts-issues-on-localhost.htm?utm_medium=social&amp;utm_source=syndication 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using Mutex&lt;T&gt; to synchronize access to a shared resource</title>
      <link>https://www.dotnetramblings.com/post/23_09_2024/23_09_2024_11/</link>
      <pubDate>Mon, 23 Sep 2024 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_09_2024/23_09_2024_11/</guid>
      <description>
        
          
            When you need to access a shared resource, you can use the lock statement or a synchronization primitive such as a Mutex to synchronize access to the resource. However, it&#39;s easy to forget it in complex code. When you need to synchronize access to a single resource, you can use a var obj = new object(); var value = 42; lock (obj) { // You need to ensure you use lock everywhere you access the shared…
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
