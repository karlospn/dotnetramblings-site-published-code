<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 13 Jan 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enhance Your .NET HttpClient with HSTS Support</title>
      <link>https://www.dotnetramblings.com/post/13_01_2025/13_01_2025_7/</link>
      <pubDate>Mon, 13 Jan 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_01_2025/13_01_2025_7/</guid>
      <description>
        
          
            HTTP Strict Transport Security (HSTS) is a security feature that indicates a client to only connect to a website over HTTPS. Websites can set the Strict-Transport-Security header to inform the client to always use HTTPS. ASP.NET Core can easily set the header, but there is no built-in feature to enable HSTS for an HttpClient. In this post, I describe how to create an HttpClient that supports HSTS,…
Link to article: https://www.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Exploring CollectionsMarshal for Dictionary</title>
      <link>https://www.dotnetramblings.com/post/06_01_2025/06_01_2025_7/</link>
      <pubDate>Mon, 06 Jan 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_01_2025/06_01_2025_7/</guid>
      <description>
        
          
            Unlike ConcurrentDictionary, Dictionary does not have a GetOrAdd method. This method is useful when you want to add a key-value pair to the dictionary if the key does not exist, or return the value if the key already exists. The naive implementation of this method looks like this: public static TValue GetOrAdd&amp;lt;TKey, TValue&amp;gt;(this Dictionary&amp;lt;TKey, TValue&amp;gt; dict, TKey key, TValue value) where TKey : notnull {…
Link to article: https://www.meziantou.net/exploring-collectionsmarshal-for-dictionary.htm?utm_medium=social&amp;utm_source=syndication 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
