<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 02 Jun 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automating Null-Forgiving Operator Removal in C# Projects</title>
      <link>https://www.dotnetramblings.com/post/02_06_2025/02_06_2025_4/</link>
      <pubDate>Mon, 02 Jun 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_06_2025/02_06_2025_4/</guid>
      <description>
        
          
            Nullable Reference Types are a feature in C# that helps developers avoid null reference exceptions by providing compile-time checks for nullability. This feature was introduced in C# 8.0 and is designed to improve code quality and reduce runtime errors. When the compiler cannot handle all cases, so developers may need to use the null-forgiving operator ! to suppress warnings. This operator tells the…
Link to article: https://www.meziantou.net/automating-null-forgiving-operator-removal-in-csharp-projects.htm?utm_medium=social&amp;utm_source=syndication 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using Pattern Matching in C# for Performance Optimization</title>
      <link>https://www.dotnetramblings.com/post/26_05_2025/26_05_2025_5/</link>
      <pubDate>Mon, 26 May 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_05_2025/26_05_2025_5/</guid>
      <description>
        
          
            The C# compiler is smart enough to understand some constructs and generates optimized code. However, C# gives you multiple ways to express the same intent. The compiler is not always smart enough to optimize every single ways. In this post, I will show you how to use pattern matching syntax to improve the performance of your code in some cases. Here&#39;s an example that checks if a version number is one of…
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
