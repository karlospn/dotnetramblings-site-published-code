<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 16 Dec 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating SBOM for NuGet packages</title>
      <link>https://www.dotnetramblings.com/post/16_12_2024/16_12_2024_7/</link>
      <pubDate>Mon, 16 Dec 2024 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_12_2024/16_12_2024_7/</guid>
      <description>
        
          
            A Software Bill of Materials (SBOM) is a list of components in a piece of software. It is a critical part of the software supply chain, as it helps to identify and track the components used in a software project. In this post, I describe how to easily generate a Software Bill of Materials (SBOM) for NuGet packages. To generate an SBOM for NuGet packages, you can use the Microsoft.Sbom.Targets package.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using the binary log to find the source of a .NET dependency</title>
      <link>https://www.dotnetramblings.com/post/09_12_2024/09_12_2024_10/</link>
      <pubDate>Mon, 09 Dec 2024 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/09_12_2024/09_12_2024_10/</guid>
      <description>
        
          
            Understanding where a dependency comes from can be tedious. This is especially true when you have a large project with many dependencies. Recently, .NET brings a new tool dotnet nuget why to help you understand why a package is installed in your project. However, there is a better way to do it, and it doesn&#39;t requires a recent SDK. dotnet nuget why can explain why a package is included in your project:â€¦
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
