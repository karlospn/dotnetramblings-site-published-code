<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 12 May 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use C# 14 extensions to simplify enum Parsing</title>
      <link>https://www.dotnetramblings.com/post/12_05_2025/12_05_2025_3/</link>
      <pubDate>Mon, 12 May 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/12_05_2025/12_05_2025_3/</guid>
      <description>
        
          
            In .NET, many types provide a static Parse method to convert strings into their respective types. For example: int.Parse(&amp;quot;123&amp;quot;); double.Parse(&amp;quot;123.45&amp;quot;); DateTime.Parse(&amp;quot;2023-01-01&amp;quot;); IPAddress.Parse(&amp;quot;192.168.0.1&amp;quot;); However, enums require the use of the Enum.Parse method: Enum.Parse(&amp;quot;Value1&amp;quot;); // MyEnum.Parse(&amp;quot;Value1&amp;quot;); // This doesn&#39;t work Wouldn&#39;t it be more intuitive if enums supported a Parse…
Link to article: https://www.meziantou.net/use-csharp-14-extensions-to-simplify-enum-parsing.htm?utm_medium=social&amp;utm_source=syndication 
          
          
        
      </description>
    </item>
    
    <item>
      <title>StringComparison.InvariantCulture is not always invariant</title>
      <link>https://www.dotnetramblings.com/post/05_05_2025/05_05_2025_5/</link>
      <pubDate>Mon, 05 May 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_05_2025/05_05_2025_5/</guid>
      <description>
        
          
            CultureInfo.InvariantCulture is not invariant for all operations. It is a special culture that is used for formatting and parsing operations that do not depend on any specific culture. For instance, this is well-suited to format values in order to persist them. However, it is not invariant for string comparisons. Comparing strings using InvariantCulture can lead to different results depending on the…
Link to article: https://www.meziantou.net/stringcomparison-invariantculture-is-not-always-invariant.htm?utm_medium=social&amp;utm_source=syndication 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
