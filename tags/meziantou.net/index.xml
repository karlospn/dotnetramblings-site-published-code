<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meziantou.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/meziantou.net/</link>
    <description>Recent content in Meziantou.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 22 Apr 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/meziantou.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using type aliases to make code clearer with generics</title>
      <link>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_11/</link>
      <pubDate>Mon, 22 Apr 2024 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_11/</guid>
      <description>
        
          
            When you use generic types in C#, it is sometimes hard to understand what the generic argument can represent. For example, what do the strings represent in Dictionary&amp;lt;string, string&amp;gt;? To make the code clearer, you can use type aliases. // ❌ What does the string means? _ = new Dictionary&amp;lt;string, string&amp;gt;(); // Create aliases using UserId = string; using ProjectId = string; // Use the type aliases // ✅ It&#39;s…
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
