<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Markheath.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/markheath.net/</link>
    <description>Recent content in Markheath.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sat, 18 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/markheath.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Tools (Safely) with LLMs</title>
      <link>https://www.dotnetramblings.com/post/18_01_2025/18_01_2025_1/</link>
      <pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/18_01_2025/18_01_2025_1/</guid>
      <description>
        
          
            In previous posts in this series I&#39;ve shown how to call LLMs with C# using the Microsoft.Extensions.AI NuGet package. In this post I want to look at how you can enable the LLM to make calls into your own C# code by giving it &amp;quot;tools&amp;quot; it can use. And we&#39;ll also discuss some of the security implications as this can open up a number of concerning attack vectors. There are a number of reasons you might want to give an LLM the ability to call a tool.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Tracking Token Usage with Microsoft.Extensions.AI</title>
      <link>https://www.dotnetramblings.com/post/11_01_2025/11_01_2025_1/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/11_01_2025/11_01_2025_1/</guid>
      <description>
        
          
            Continuing in my recent series of posts about calling LLMs with C# using the Microsoft.Extensions.AI NuGet package, in this post I want to discuss how to track the cost of your API calls to AI models. Each AI provider will have its own pricing structure for the various models it offers. For example, here are pricing pages for Azure OpenAI service, OpenAI&#39;s own API, Anthropic&#39;s API, Google Gemini API, DeepSeek API, Amazon Bedrock, and xAI Grok.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
