<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Markheath.net on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/markheath.net/</link>
    <description>Recent content in Markheath.net on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sat, 11 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/markheath.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tracking Token Usage with Microsoft.Extensions.AI</title>
      <link>https://www.dotnetramblings.com/post/11_01_2025/11_01_2025_1/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/11_01_2025/11_01_2025_1/</guid>
      <description>
        
          
            Continuing in my recent series of posts about calling LLMs with C# using the Microsoft.Extensions.AI NuGet package, in this post I want to discuss how to track the cost of your API calls to AI models. Each AI provider will have its own pricing structure for the various models it offers. For example, here are pricing pages for Azure OpenAI service, OpenAI&#39;s own API, Anthropic&#39;s API, Google Gemini API, DeepSeek API, Amazon Bedrock, and xAI Grok.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Passing images to LLMs in C# with Microsoft.Extensions.AI</title>
      <link>https://www.dotnetramblings.com/post/07_01_2025/07_01_2025_16/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_01_2025/07_01_2025_16/</guid>
      <description>
        
          
            I recently posted about how to get started calling LLMs with C# using the Microsoft.Extensions.AI NuGet package. The model we chose to use was gpt-4o-mini, which has the advantage of being &amp;quot;multimodal&amp;quot;, as it can accept not only text input, but images as well. In this post I&#39;ll show how you can pass an image to this model using Microsoft.Extensions.AI and ask it to describe the image. It&#39;s relatively straightforward, but as always seems to be the case with these things, there was a gotcha I ran into.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
