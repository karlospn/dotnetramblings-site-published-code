<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code-Maze.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/code-maze.com/</link>
    <description>Recent content in Code-Maze.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 24 Jun 2024 05:03:44 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/code-maze.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proxy Design Pattern in C#</title>
      <link>https://www.dotnetramblings.com/post/24_06_2024/24_06_2024_7/</link>
      <pubDate>Mon, 24 Jun 2024 05:03:44 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_06_2024/24_06_2024_7/</guid>
      <description>
        
          
            In this article, we are going to talk about a structural design pattern, the Proxy Pattern. We will discuss what problem this pattern solves and how to implement it in C#. If you want to read more about design patterns in C#, you can inspect our C# Design Patterns page. Let’s start. What is The Proxy Design […] The post Proxy Design Pattern in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Working With Semaphore Class in C# and Best Practices</title>
      <link>https://www.dotnetramblings.com/post/20_06_2024/20_06_2024_0/</link>
      <pubDate>Thu, 20 Jun 2024 21:05:24 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_06_2024/20_06_2024_0/</guid>
      <description>
        
          
            In this article, we’ll introduce the semaphore class in C#. We’ll compare the semaphore and semaphoreSlim classes and discuss the best practices for using semaphores. Let’s start. What is a Semaphore Class in C#? The Semaphore class in C# is another mechanism to synchronize a thread’s access to shared resources. It’s more flexible than lock […] The post Working With Semaphore Class in C# and Best Practices appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>What Does the null! Statement Do?</title>
      <link>https://www.dotnetramblings.com/post/20_06_2024/20_06_2024_14/</link>
      <pubDate>Thu, 20 Jun 2024 02:22:53 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_06_2024/20_06_2024_14/</guid>
      <description>
        
          
            In this article, we are going to discuss the null! statement in C#. First, we will explore its construct, and function in our programs. Then, we will examine various situations where we can use this statement in our applications. Let’s dive in. A Little Bit of History – The Different Types of Objects in C# […] The post What Does the null! Statement Do? appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Use FakeLogger to Test Logging Code in .NET</title>
      <link>https://www.dotnetramblings.com/post/19_06_2024/19_06_2024_15/</link>
      <pubDate>Wed, 19 Jun 2024 06:21:44 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_06_2024/19_06_2024_15/</guid>
      <description>
        
          
            In software development, logging, and unit testing serve as foundational tools, each actively contributing to the reliability and functionality of our applications. While unit testing promptly alerts us to changes in our application’s business logic, logging actively monitors errors, performance metrics, and runtime execution flow. Despite their significance, many development workflows often overlook their incorporation. […] The post How to Use FakeLogger to Test Logging Code in .NET appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Ignore a Property in AutoMapper</title>
      <link>https://www.dotnetramblings.com/post/18_06_2024/18_06_2024_13/</link>
      <pubDate>Tue, 18 Jun 2024 05:34:41 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/18_06_2024/18_06_2024_13/</guid>
      <description>
        
          
            In this article, we will explore key techniques to ignore property in AutoMapper. We will use the Ignore() method, the Ignore attribute, and the DoNotValidate() method. We will also discuss when and how to use each of the methods mentioned. Without further ado, let’s start! When to Ignore a Property in AutoMapper Ignoring properties during […] The post How to Ignore a Property in AutoMapper appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Flattening Nested Collections in C#</title>
      <link>https://www.dotnetramblings.com/post/17_06_2024/17_06_2024_10/</link>
      <pubDate>Mon, 17 Jun 2024 05:31:23 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_06_2024/17_06_2024_10/</guid>
      <description>
        
          
            In this article, we’ll explore flattening nested collections in C#. We’ll examine different approaches for handling from simple to complex data structures, offering practical guidance to effectively flatten nested collections within our C# applications. Let’s get started. Importance of Flattening Nested Collections Nested collections can introduce unnecessary complexity, making it challenging to work with the […] The post Flattening Nested Collections in C# appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
