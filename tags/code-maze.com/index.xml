<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code-Maze.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/code-maze.com/</link>
    <description>Recent content in Code-Maze.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 10 Jun 2024 02:32:22 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/code-maze.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Retrying Failed HttpClient Requests in .NET Using Polly</title>
      <link>https://www.dotnetramblings.com/post/10_06_2024/10_06_2024_4/</link>
      <pubDate>Mon, 10 Jun 2024 02:32:22 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_06_2024/10_06_2024_4/</guid>
      <description>
        
          
            In this article, we will explore the different approaches to retrying failed HttpClient requests using Polly. We will also discuss the advantages and disadvantages of each retry strategy, from simplest to most sophisticated. Let’s start. Reasons for HttpClient Request Failures We like to think of the Internet as a reliable data transmission medium. Sadly, this […] The post Retrying Failed HttpClient Requests in .NET Using Polly appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Use the LINQ ToDictionary Method in C#</title>
      <link>https://www.dotnetramblings.com/post/08_06_2024/08_06_2024_3/</link>
      <pubDate>Sat, 08 Jun 2024 06:22:17 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_06_2024/08_06_2024_3/</guid>
      <description>
        
          
            In this article, let’s describe how to use the LINQ ToDictionary() method in C#. We will start by defining this method and how it works. Then, we will proceed to show several ways of invoking it. Ultimately, we will discuss different situations where we can utilize the LINQ ToDictionary() method to transform data in our […] The post How to Use the LINQ ToDictionary Method in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Serialize a PascalCase JSON.NET JObject to camelCase</title>
      <link>https://www.dotnetramblings.com/post/07_06_2024/07_06_2024_5/</link>
      <pubDate>Fri, 07 Jun 2024 06:14:48 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_06_2024/07_06_2024_5/</guid>
      <description>
        
          
            In this article, we’re going to learn how to serialize a PascalCase JObject to a camelCase format. We will do this in two ways by using the most familiar JSON library in the .NET ecosystem which is Newtonsoft.Json. Let’s begin. Overview of JObject Serialization in .NET Serializing JSON objects is a common practice in .NET […] The post How to Serialize a PascalCase JSON.NET JObject to camelCase appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Bouncy Castle Cryptography Library for .NET</title>
      <link>https://www.dotnetramblings.com/post/06_06_2024/06_06_2024_15/</link>
      <pubDate>Thu, 06 Jun 2024 05:18:52 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_06_2024/06_06_2024_15/</guid>
      <description>
        
          
            Cryptography remains an ever-important topic in building modern security-minded applications. Bouncy Castle is a cryptography library for .NET that allows users to build robust cryptography features. In this article, we will cover just a few important capabilities Bouncy Castle offers us and how to implement them. Let’s get started! What is Bouncy Castle? Bouncy Castle […] The post Bouncy Castle Cryptography Library for .NET appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Comparing ExecuteAsync() and StartAsync() Methods from the BackgroundService Class in .NET</title>
      <link>https://www.dotnetramblings.com/post/05_06_2024/05_06_2024_12/</link>
      <pubDate>Wed, 05 Jun 2024 05:56:59 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_06_2024/05_06_2024_12/</guid>
      <description>
        
          
            Due to the emerging significance of running background tasks, .NET Core has given us new ways of achieving it. BackgroundService is another tool in our toolbox with methods ExecuteAsync() and StartAsync() being the central components. In this article, we will compare these methods and demonstrate when and how to use them. We will first introduce […] The post Comparing ExecuteAsync() and StartAsync() Methods from the BackgroundService Class in .NET appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Mock IConfiguration.GetValue in ASP.NET Core</title>
      <link>https://www.dotnetramblings.com/post/04_06_2024/04_06_2024_17/</link>
      <pubDate>Tue, 04 Jun 2024 05:26:57 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/04_06_2024/04_06_2024_17/</guid>
      <description>
        
          
            In this article, we’ll take a closer look at how we can mock IConfiguration.GetValue when writing unit tests in ASP.NET Core. Let’s start! Mock IConfiguration.GetValue in ASP.NET Core Before we start mocking, we need a class that utilizes IConfiguration: public class FinanceService(IConfiguration configuration) : IFinanceService { public double CalculateTotalAmount(double hours) { var hourlyRate = configuration.GetValue(&amp;quot;FinanceSettings:HourlyRate&amp;quot;); […] The post How to Mock IConfiguration.GetValue in ASP.NET Core appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Embedded Resources in .NET</title>
      <link>https://www.dotnetramblings.com/post/03_06_2024/03_06_2024_14/</link>
      <pubDate>Mon, 03 Jun 2024 06:48:05 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/03_06_2024/03_06_2024_14/</guid>
      <description>
        
          
            We’ve covered resources in a couple of our previous articles. In Localization in ASP.NET Core, we delved into .NET localization, touching upon resources since XML files utilized for localization fall under .NET resources. We also discussed resources in our article, How to Read a String From a .resx (Resource) File in C#, where we explored […] The post Embedded Resources in .NET appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
