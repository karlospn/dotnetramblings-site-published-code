<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code-Maze.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/code-maze.com/</link>
    <description>Recent content in Code-Maze.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Fri, 14 Jun 2024 06:27:12 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/code-maze.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find Differences Between Collections With the LINQ Except Method in C#</title>
      <link>https://www.dotnetramblings.com/post/14_06_2024/14_06_2024_3/</link>
      <pubDate>Fri, 14 Jun 2024 06:27:12 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/14_06_2024/14_06_2024_3/</guid>
      <description>
        
          
            When working with collections in C#, we sometimes need to manipulate them by performing operations such as comparisons, mergers, or finding set differences between them. The LINQ Except method comes in handy when we want to find the set difference between two sequences, as it returns a new sequence containing elements in the first sequence […] The post Find Differences Between Collections With the LINQ Except Method in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Differences Between Span and Memory in C#</title>
      <link>https://www.dotnetramblings.com/post/13_06_2024/13_06_2024_8/</link>
      <pubDate>Thu, 13 Jun 2024 05:22:05 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_06_2024/13_06_2024_8/</guid>
      <description>
        
          
            In this article, we’ll briefly explain the Span and Memory .NET types and mention their primary usage. Furthermore, we will explore the differences between Span and Memory in C# in depth and conclude with some general tips on when to use one type over another. What Is Span? The Span type is a value type […] The post Differences Between Span and Memory in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Adding a Custom Header Parameter to All API Endpoints in Swagger</title>
      <link>https://www.dotnetramblings.com/post/12_06_2024/12_06_2024_11/</link>
      <pubDate>Wed, 12 Jun 2024 05:59:46 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/12_06_2024/12_06_2024_11/</guid>
      <description>
        
          
            Within the .NET ecosystem, Swagger stands out as an essential tool, enabling developers to produce interactive and comprehensive API documentation. Header parameters play a crucial role in carrying important metadata in HTTP requests. Specifically, this metadata includes information like authentication tokens and custom configurations, shaping how clients and services interact. In this article, we explore […] The post Adding a Custom Header Parameter to All API Endpoints in Swagger appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Weak Events in C#</title>
      <link>https://www.dotnetramblings.com/post/11_06_2024/11_06_2024_19/</link>
      <pubDate>Tue, 11 Jun 2024 06:41:43 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/11_06_2024/11_06_2024_19/</guid>
      <description>
        
          
            We use weak events in C# to avoid memory leaks in event-based applications. Let’s learn more about weak events, why they’re needed, and how to implement them. Let’s get started. What Are Strong and Weak Events? A strong event is the default implementation of an event in C#. It enables an object to notify other […] The post Weak Events in C# appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Retrying Failed HttpClient Requests in .NET Using Polly</title>
      <link>https://www.dotnetramblings.com/post/10_06_2024/10_06_2024_11/</link>
      <pubDate>Mon, 10 Jun 2024 02:32:22 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_06_2024/10_06_2024_11/</guid>
      <description>
        
          
            In this article, we will explore the different approaches to retrying failed HttpClient requests using Polly. We will also discuss the advantages and disadvantages of each retry strategy, from simplest to most sophisticated. Let’s start. Reasons for HttpClient Request Failures We like to think of the Internet as a reliable data transmission medium. Sadly, this […] The post Retrying Failed HttpClient Requests in .NET Using Polly appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Use the LINQ ToDictionary Method in C#</title>
      <link>https://www.dotnetramblings.com/post/08_06_2024/08_06_2024_3/</link>
      <pubDate>Sat, 08 Jun 2024 06:22:17 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_06_2024/08_06_2024_3/</guid>
      <description>
        
          
            In this article, let’s describe how to use the LINQ ToDictionary() method in C#. We will start by defining this method and how it works. Then, we will proceed to show several ways of invoking it. Ultimately, we will discuss different situations where we can utilize the LINQ ToDictionary() method to transform data in our […] The post How to Use the LINQ ToDictionary Method in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Serialize a PascalCase JSON.NET JObject to camelCase</title>
      <link>https://www.dotnetramblings.com/post/07_06_2024/07_06_2024_5/</link>
      <pubDate>Fri, 07 Jun 2024 06:14:48 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_06_2024/07_06_2024_5/</guid>
      <description>
        
          
            In this article, we’re going to learn how to serialize a PascalCase JObject to a camelCase format. We will do this in two ways by using the most familiar JSON library in the .NET ecosystem which is Newtonsoft.Json. Let’s begin. Overview of JObject Serialization in .NET Serializing JSON objects is a common practice in .NET […] The post How to Serialize a PascalCase JSON.NET JObject to camelCase appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
