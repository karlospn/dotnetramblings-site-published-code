<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code-Maze.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/code-maze.com/</link>
    <description>Recent content in Code-Maze.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 24 Jul 2024 05:24:12 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/code-maze.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-Source Data Integration With Strawberry Shake Subscriptions</title>
      <link>https://www.dotnetramblings.com/post/24_07_2024/24_07_2024_2/</link>
      <pubDate>Wed, 24 Jul 2024 05:24:12 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_07_2024/24_07_2024_2/</guid>
      <description>
        
          
            When we need multi-source data integration, Strawberry Shake allows us to wire up GraphQL with Subscriptions to implement a pub-sub system. For instructions on creating a Strawberry Shake GraphQL client to communicate using the GraphQL API of our Strawberry Shake series, check out the previous article. Multi-Source Data Integration Requirements When expanding our Strawberry Shake […] The post Multi-Source Data Integration With Strawberry Shake Subscriptions appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Convert a Stream to a File in C#</title>
      <link>https://www.dotnetramblings.com/post/22_07_2024/22_07_2024_6/</link>
      <pubDate>Mon, 22 Jul 2024 05:22:23 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_07_2024/22_07_2024_6/</guid>
      <description>
        
          
            In this article, we’ll discuss how to convert a stream to a file in C#. We will demonstrate different ways to do that, discuss the advantages and disadvantages of each, and see when one way could be more suitable. Let’s dive in. What Is a Stream A stream is an abstraction of a sequence of […] The post How to Convert a Stream to a File in C# appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to Test IServiceCollection Registrations in .NET</title>
      <link>https://www.dotnetramblings.com/post/19_07_2024/19_07_2024_5/</link>
      <pubDate>Fri, 19 Jul 2024 06:10:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_07_2024/19_07_2024_5/</guid>
      <description>
        
          
            Unit testing IServiceCollection registrations in .NET enables us to test our application’s IServiceCollection to confirm that the setup of dependency injection is correct, allowing us to catch errors early in development. E.g. if we fail to register a service or register a service incorrectly with the wrong lifetime, we would be able to detect such […] The post How to Test IServiceCollection Registrations in .NET appeared first on Code Maze.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using EF Core Interceptors in .NET</title>
      <link>https://www.dotnetramblings.com/post/17_07_2024/17_07_2024_11/</link>
      <pubDate>Wed, 17 Jul 2024 05:14:01 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_07_2024/17_07_2024_11/</guid>
      <description>
        
          
            Entity Framework Core (EF Core) has many powerful features, with Interceptors being one of the most versatile. Interceptors allow us to plug in custom behavior at different stages of the EF Core operation pipeline, giving us enhanced control over data interaction processes. Moreover, by using interceptors, we can fine-tune our database operations, enforce business rules, […] The post Using EF Core Interceptors in .NET appeared first on Code Maze.
Link to article: https://code-maze.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
