<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 16 Jun 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection Performance: Introducing FrozenSet in .NET 8: Benefits and Benchmark PerformanceCollection Performance</title>
      <link>https://www.dotnetramblings.com/post/16_06_2024/16_06_2024_0/</link>
      <pubDate>Sun, 16 Jun 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_06_2024/16_06_2024_0/</guid>
      <description>
        
          
            .NET version 8 introduced the FrozenSet type, offering immutable and hashable set collection with benefits including improved performance, memory efficiency, and thread safety. Benchmarks show comparable performance to List, outperforming HashSet and ImmutableHashSet. However, it is slightly slower than the latter in lookups. FrozenSet offers significant advantages for concurrent applications and memory optimization.
Link to article: https://dotnettips.wordpress.com/2024/06/16/collection-performance-introducing-frozenset-in-net-8-benefits-and-benchmark-performancecollection-performance/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
