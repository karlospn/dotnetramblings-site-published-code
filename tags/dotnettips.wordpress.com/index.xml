<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 22 Apr 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection Performance: Creating a List&lt;&gt; Using The Task.Parallel Library</title>
      <link>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</link>
      <pubDate>Mon, 22 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</guid>
      <description>
        
          
            The post discusses alternative approaches to adding items to a collection using For() or ForEach() from the Task Parallel Library.
Link to article: https://dotnettips.wordpress.com/2024/04/22/collection-performance-creating-a-list-using-the-task-parallel-library/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>String Performance: Appending a Character using the StringBuilder</title>
      <link>https://www.dotnetramblings.com/post/17_04_2024/17_04_2024_9/</link>
      <pubDate>Wed, 17 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_04_2024/17_04_2024_9/</guid>
      <description>
        
          
            The use of a single character with a StringBuilder from an ObjectPool can improve performance. Benchmark results show similar overall performance, but without an ObjectPool, using a character becomes more significant. It is recommended to use a character in such cases. EditorConfig setup can check for this issue using dotnet_diagnostic.CA1834.severity = warning.
Link to article: https://dotnettips.wordpress.com/2024/04/17/string-performance-appending-a-character-using-the-stringbuilder/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Checking Strings for Null</title>
      <link>https://www.dotnetramblings.com/post/16_04_2024/16_04_2024_13/</link>
      <pubDate>Tue, 16 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_04_2024/16_04_2024_13/</guid>
      <description>
        
          
            The article discusses best practices for checking strings for null in coding. It outlines three common methods: using == null, is null, or string.IsNullOrEmpty().
Link to article: https://dotnettips.wordpress.com/2024/04/16/code-it-any-way-you-want-checking-strings-for-null/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tips</title>
      <link>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_4/</link>
      <pubDate>Mon, 15 Apr 2024 16:49:27 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_4/</guid>
      <description>
        
          
            These articles delves into indispensable tips that should consistently be integrated into your coding practices. Though these tips may seem small, their cumulative impact becomes pronounced, particularly when handling high message volumes. Embracing these fundamental practices can yield substantial benefits for overall performance.
Link to article: https://dotnettips.wordpress.com/2024/04/15/general-performance-tips/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Reference Type &amp; Structure Performance: Hashing Classes, Records, and Structures</title>
      <link>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_11/</link>
      <pubDate>Mon, 15 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_11/</guid>
      <description>
        
          
            A SHA256 hash can be generated for a class, record, or structure using a specific code. Performance analysis shows that hashing a class is 1.032 times faster than a structure and 1.048 times more efficient than a record. The memory allocations for record, reference, and value types are also provided in bytes.
Link to article: https://dotnettips.wordpress.com/2024/04/15/reference-type-structure-performance-hashing-classes-records-and-structures/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
