<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 06 Apr 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comparing Type Checking Methods in .NET: Performance vs. Readability</title>
      <link>https://www.dotnetramblings.com/post/06_04_2025/06_04_2025_0/</link>
      <pubDate>Sun, 06 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_04_2025/06_04_2025_0/</guid>
      <description>
        
          
            In .NET, type checking methods include GetType(), the is keyword, IsAssignableFrom(), and the as keyword. Each method varies in readability and performance.
Link to article: https://dotnettips.wordpress.com/2025/04/06/comparing-type-checking-methods-in-net-performance-vs-readability/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis: Improve .NET Performance by Reusing Constant Arrays</title>
      <link>https://www.dotnetramblings.com/post/04_04_2025/04_04_2025_16/</link>
      <pubDate>Fri, 04 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/04_04_2025/04_04_2025_16/</guid>
      <description>
        
          
            In optimizing the Spargine project, I improved performance by avoiding constant arrays as method arguments. Instead, using static readonly fields reduced memory allocations significantly. This change enhanced execution speed, yielding a 1.34x performance gain. I recommend enabling CA1856 warnings in .editorconfig to maintain performance-focused coding practices.
Link to article: https://dotnettips.wordpress.com/2025/04/04/microsoft-net-code-analysis-improve-net-performance-by-reusing-constant-arrays/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Supporting Companies That Use Microsoft .NET</title>
      <link>https://www.dotnetramblings.com/post/02_04_2025/02_04_2025_12/</link>
      <pubDate>Wed, 02 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_04_2025/02_04_2025_12/</guid>
      <description>
        
          
            The post highlights a decline in Microsoft .NET&#39;s presence in job listings while advocating for companies that still utilize it, such as Ardent Mills, GEICO, and Peloton. It also notes companies that do not use .NET, promoting awareness of diverse technology stacks. Community support for these organizations is encouraged to sustain .NET&#39;s relevance.
Link to article: https://dotnettips.wordpress.com/2025/04/02/supporting-companies-that-use-microsoft-net/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Simplify File Operations with Spargineâ€™s FileProcessor</title>
      <link>https://www.dotnetramblings.com/post/30_03_2025/30_03_2025_1/</link>
      <pubDate>Sun, 30 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_03_2025/30_03_2025_1/</guid>
      <description>
        
          
            Spargine is an open-source set of .NET assemblies and NuGet packages developed for .NET 8 and 9, focusing on file I/O operations. The FileProcessor component streamlines tasks like copying and deleting files. It provides detailed processing results, enhancing workflow efficiency.
Link to article: https://dotnettips.wordpress.com/2025/03/30/boost-your-net-projects-simplify-file-operations-with-spargines-fileprocessor/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
