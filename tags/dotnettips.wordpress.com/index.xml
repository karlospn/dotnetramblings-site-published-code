<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 22 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Performance: Exploring the Performance Impact of the ‘in’ Keyword in C# 7.2</title>
      <link>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</link>
      <pubDate>Wed, 22 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</guid>
      <description>
        
          
            Discover the impact of the &#39;in&#39; keyword in C# 7.2 on method parameters, ensuring reference treatment for enhanced performance. Explore a practical example and insights in our latest article.
Link to article: https://dotnettips.wordpress.com/2024/05/22/general-performance-exploring-the-performance-impact-of-the-in-keyword-in-c-7-2/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Expression-Bodied Methods vs. Traditional Methods</title>
      <link>https://www.dotnetramblings.com/post/21_05_2024/21_05_2024_17/</link>
      <pubDate>Tue, 21 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/21_05_2024/21_05_2024_17/</guid>
      <description>
        
          
            The article discusses the use of expression-bodied methods in .NET as an alternative to traditional methods for creating simple functions. It presents a comparison between the two methods in terms of syntax and performance. Despite the syntactical differences, benchmark results show that both methods demonstrate similar performance characteristics.
Link to article: https://dotnettips.wordpress.com/2024/05/21/code-it-any-way-you-want-expression-bodied-methods-vs-traditional-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Retrieving the Nullable Value from a Reference Type</title>
      <link>https://www.dotnetramblings.com/post/20_05_2024/20_05_2024_11/</link>
      <pubDate>Mon, 20 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_05_2024/20_05_2024_11/</guid>
      <description>
        
          
            The article discusses two methods for retrieving nullable values from reference types in C#, showcasing examples using the ternary conditional expression and the null coalesce approach. Benchmark results indicate that the null coalesce approach demonstrates 1.12 times higher efficiency in performance compared to the ternary conditional expression.
Link to article: https://dotnettips.wordpress.com/2024/05/20/general-performance-tip-retrieving-the-nullable-value-from-a-reference-type/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>From Visual Basic to Visual Studio: A Journey Through Microsoft’s IDE Evolution</title>
      <link>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_2/</link>
      <pubDate>Sun, 19 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_2/</guid>
      <description>
        
          
            The author shares their journey from Visual Basic 2 in 1992 to the latest tools like Visual Studio and Visual Studio Code (VS Code). They emphasize the evolution of Microsoft&#39;s IDEs for software, web, and database development. They advocate for a hybrid approach of using IDEs for efficiency and familiarizing with CLI commands for flexibility.
Link to article: https://dotnettips.wordpress.com/2024/05/19/from-visual-basic-to-visual-studio-a-journey-through-microsofts-ide-evolution/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dotNetDave Rocks The Bay.NET User Group</title>
      <link>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_0/</link>
      <pubDate>Fri, 17 May 2024 18:14:08 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_0/</guid>
      <description>
        
          
            The dotNetDave No Rest for the Wicked World Tour is holding a virtual session on code and app performance for Microsoft .NET, tailored to .NET 8, on June 20th. The session will cover optimizing code performance and minimizing memory footprint, with insights from the latest performance metrics outlined in the fourth edition of &amp;quot;Rock Your Code: Code &amp;amp; App Performance for Microsoft&amp;quot;. For more details, visit https://www.meetup.com/baynet/events/301041843.
Link to article: https://dotnettips.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Exercise Caution When Using Take() with a Basic Count</title>
      <link>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_9/</link>
      <pubDate>Fri, 17 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_9/</guid>
      <description>
        
          
            The article advises caution when using the LINQ method Take() with a basic count, suggesting that a range might be recommended by code analyzers. However, benchmark results indicate that using Take() with a simple count is 1.63 times faster than employing a range in such cases.
Link to article: https://dotnettips.wordpress.com/2024/05/17/collection-performance-exercise-caution-when-using-take-with-a-basic-count/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Difference Between Static and Non-Static Methods</title>
      <link>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_15/</link>
      <pubDate>Thu, 16 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_15/</guid>
      <description>
        
          
            The article explores the performance disparity between static and non-static methods, commonly recommended for efficiency by code analysis tools.
Link to article: https://dotnettips.wordpress.com/2024/05/16/code-it-any-way-you-want-performance-difference-between-static-and-non-static-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Looping Over a Collection Using Span and ReadOnlySpan</title>
      <link>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</link>
      <pubDate>Wed, 15 May 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</guid>
      <description>
        
          
            The article explores the performance benefits of utilizing Span and ReadOnlySpan for collection processing, highlighting advantages such as improved performance, reduced memory pressure, enhanced safety, and compatibility with modern API design. Span allows read-write access and efficient iteration with lightweight storage, while ReadOnlySpan provides read-only access to prevent accidental modifications, offering similar benefits for collection processing.
Link to article: https://dotnettips.wordpress.com/2024/05/15/collection-performance-looping-over-a-collection-using-span-and-readonlyspan/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
