<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Fri, 10 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Performance Tip: Type Conversion</title>
      <link>https://www.dotnetramblings.com/post/10_05_2024/10_05_2024_8/</link>
      <pubDate>Fri, 10 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_05_2024/10_05_2024_8/</guid>
      <description>
        
          
            This article explores type conversion in programming, comparing the traditional syntax with the newer &amp;quot;as&amp;quot; keyword in .NET. While the &amp;quot;as&amp;quot; keyword improves code readability, benchmark results suggest that the conventional method is slightly more performant, advising developers to stick with traditional type conversion unless significant performance improvements are observed with the &amp;quot;as&amp;quot; keyword.
Link to article: https://dotnettips.wordpress.com/2024/05/10/general-performance-tip-type-conversion/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Reference Type &amp; Structure Performance: Constant vs. Read-only Property</title>
      <link>https://www.dotnetramblings.com/post/09_05_2024/09_05_2024_12/</link>
      <pubDate>Thu, 09 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/09_05_2024/09_05_2024_12/</guid>
      <description>
        
          
            This content discusses the performance of using a constant vs. a read-only property.
Link to article: https://dotnettips.wordpress.com/2024/05/09/reference-type-structure-performance-constant-vs-read-only-property/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>String Performance: Checking for a Character</title>
      <link>https://www.dotnetramblings.com/post/08_05_2024/08_05_2024_14/</link>
      <pubDate>Wed, 08 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_05_2024/08_05_2024_14/</guid>
      <description>
        
          
            The article compares two methods of checking for the presence of a specific character in a string in C#. Benchmark results reveal that using a character in the search is 3.57 times more efficient than using a string, and Contains() outperforms StringComparison.Ordinal and StringComparison.OrdinalIgnoreCase in terms of speed.
Link to article: https://dotnettips.wordpress.com/2024/05/08/string-performance-checking-for-a-character-2/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dotNetDave Rocks The Austin .NET User Group (2024)</title>
      <link>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_6/</link>
      <pubDate>Tue, 07 May 2024 17:17:10 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_6/</guid>
      <description>
        
          
            The dotNetDave No Rest for the Wicked World Tour is coming to the Austin .NET User Group in Texas on May 9th. This session will focus on code and app performance for Microsoft .NET, covering efficient code execution and techniques for minimizing memory footprint. Watch the live session and access related resources to optimize code performance.
Link to article: https://dotnettips.wordpress.com/2024/05/07/dotnetdave-rocks-the-austin-net-user-group-2024/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Constants vs. Read-only Fields</title>
      <link>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_13/</link>
      <pubDate>Tue, 07 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_13/</guid>
      <description>
        
          
            The article discusses best practices for checking strings for null in coding. It outlines three common methods: using == null, is null, or string.IsNullOrEmpty().
Link to article: https://dotnettips.wordpress.com/2024/05/07/code-it-any-way-you-want-constants-vs-read-only-fields/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Leveraging LINQ MAXBy() and MINBy() for Efficient and Readable Code</title>
      <link>https://www.dotnetramblings.com/post/06_05_2024/06_05_2024_5/</link>
      <pubDate>Mon, 06 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_05_2024/06_05_2024_5/</guid>
      <description>
        
          
            The article explores the usage of LINQ&#39;s MinBy() and MaxBy() methods, which efficiently return the objects with the minimum and maximum values in a sequence based on a specified key selector function.
Link to article: https://dotnettips.wordpress.com/2024/05/06/collection-performance-leveraging-linq-maxby-and-minby-for-efficient-and-readable-code/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
