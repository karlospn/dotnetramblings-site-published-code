<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 29 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microsoft .NET Code Analysis: Exercise Caution When Employing ContainsKey() with Dictionary Types</title>
      <link>https://www.dotnetramblings.com/post/29_05_2024/29_05_2024_9/</link>
      <pubDate>Wed, 29 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/29_05_2024/29_05_2024_9/</guid>
      <description>
        
          
            The article highlights the potential performance issues of using ContainsKey() with Dictionary types in Microsoft .NET, advocating for the adoption of TryGetValue() instead. By employing TryGetValue(), the double lookup process is avoided, resulting in improved efficiency and code readability, as demonstrated through benchmark results and recommendations for custom dictionary types.
Link to article: https://dotnettips.wordpress.com/2024/05/29/microsoft-net-code-analysis-exercise-caution-when-employing-containskey-with-dictionary-types/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing Collection Examination: A Comparative Analysis of Predicate Methods in C#</title>
      <link>https://www.dotnetramblings.com/post/27_05_2024/27_05_2024_4/</link>
      <pubDate>Mon, 27 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/27_05_2024/27_05_2024_4/</guid>
      <description>
        
          
            The article explores four methods for examining items in a collection using predicates, with a focus on performance. A Twitter poll revealed that over 50% of developers favored the LINQ Any() method, prompting the author to verify its efficiency in comparison to other options like Count() and Exists().
Link to article: https://dotnettips.wordpress.com/2024/05/27/optimizing-collection-examination-a-comparative-analysis-of-predicate-methods-in-c/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Understanding and Utilizing Common Attributes in Classes in Microsoft .NET</title>
      <link>https://www.dotnetramblings.com/post/26_05_2024/26_05_2024_1/</link>
      <pubDate>Sun, 26 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_05_2024/26_05_2024_1/</guid>
      <description>
        
          
            Attributes for class members offer metadata and instructions for interaction with those members. This post highlights common member attributes like DebuggerDisplay, DefaultValue, DisallowNull, EditorBrowsable, MemberNotNull, MemberNotNullWhen, Range, and ReadOnly, detailing their purpose and benefits in enhancing code quality, documentation, and IDE support. Utilize these attributes to aid development processes.
Link to article: https://dotnettips.wordpress.com/2024/05/26/understanding-and-utilizing-common-attributes-in-classes-in-microsoft-net/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Enhancing Enum Handling in Spargine: Beyond Enums and into Versatility</title>
      <link>https://www.dotnetramblings.com/post/24_05_2024/24_05_2024_4/</link>
      <pubDate>Fri, 24 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_05_2024/24_05_2024_4/</guid>
      <description>
        
          
            This content explains the usage of Enums in programming, cautioning against relying solely on Enum values for human-readable names from databases due to potential performance issues. It introduces EnumHelper and EnumExtensions in Spargine, providing methods like GetValues() and GetDescription(). The article also discusses the Enumeration class as a solution to surpass Enum limitations, offering flexibility for custom names and methods like FromDisplayName. This extends Enum functionality and provides more versatility when Enum&#39;s constraints are exceeded.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Initializing Reference Type Static Fields Inline for Enhanced Code Readability</title>
      <link>https://www.dotnetramblings.com/post/23_05_2024/23_05_2024_0/</link>
      <pubDate>Thu, 23 May 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_05_2024/23_05_2024_0/</guid>
      <description>
        
          
            The article advocates for initializing reference type static fields inline to enhance code readability and prevent unexpected behavior caused by uninitialized static fields. Microsoft recommends initializing these fields at the point of declaration to improve clarity. The article provides examples demonstrating the issue and the recommended solution, emphasizing the use of static constructors for initialization.
Link to article: https://dotnettips.wordpress.com/2024/05/23/code-it-any-way-you-want-initializing-reference-type-static-fields-inline-for-enhanced-code-readability/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance: Exploring the Performance Impact of the ‘in’ Keyword in C# 7.2</title>
      <link>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</link>
      <pubDate>Wed, 22 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</guid>
      <description>
        
          
            Discover the impact of the &#39;in&#39; keyword in C# 7.2 on method parameters, ensuring reference treatment for enhanced performance. Explore a practical example and insights in our latest article.
Link to article: https://dotnettips.wordpress.com/2024/05/22/general-performance-exploring-the-performance-impact-of-the-in-keyword-in-c-7-2/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
