<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Fri, 24 May 2024 08:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enhancing Enum Handling in Spargine: Beyond Enums and into Versatility</title>
      <link>https://www.dotnetramblings.com/post/24_05_2024/24_05_2024_4/</link>
      <pubDate>Fri, 24 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_05_2024/24_05_2024_4/</guid>
      <description>
        
          
            This content explains the usage of Enums in programming, cautioning against relying solely on Enum values for human-readable names from databases due to potential performance issues. It introduces EnumHelper and EnumExtensions in Spargine, providing methods like GetValues() and GetDescription(). The article also discusses the Enumeration class as a solution to surpass Enum limitations, offering flexibility for custom names and methods like FromDisplayName. This extends Enum functionality and provides more versatility when Enum&#39;s constraints are exceeded.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Initializing Reference Type Static Fields Inline for Enhanced Code Readability</title>
      <link>https://www.dotnetramblings.com/post/23_05_2024/23_05_2024_0/</link>
      <pubDate>Thu, 23 May 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_05_2024/23_05_2024_0/</guid>
      <description>
        
          
            The article advocates for initializing reference type static fields inline to enhance code readability and prevent unexpected behavior caused by uninitialized static fields. Microsoft recommends initializing these fields at the point of declaration to improve clarity. The article provides examples demonstrating the issue and the recommended solution, emphasizing the use of static constructors for initialization.
Link to article: https://dotnettips.wordpress.com/2024/05/23/code-it-any-way-you-want-initializing-reference-type-static-fields-inline-for-enhanced-code-readability/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance: Exploring the Performance Impact of the ‘in’ Keyword in C# 7.2</title>
      <link>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</link>
      <pubDate>Wed, 22 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_05_2024/22_05_2024_11/</guid>
      <description>
        
          
            Discover the impact of the &#39;in&#39; keyword in C# 7.2 on method parameters, ensuring reference treatment for enhanced performance. Explore a practical example and insights in our latest article.
Link to article: https://dotnettips.wordpress.com/2024/05/22/general-performance-exploring-the-performance-impact-of-the-in-keyword-in-c-7-2/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Expression-Bodied Methods vs. Traditional Methods</title>
      <link>https://www.dotnetramblings.com/post/21_05_2024/21_05_2024_17/</link>
      <pubDate>Tue, 21 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/21_05_2024/21_05_2024_17/</guid>
      <description>
        
          
            The article discusses the use of expression-bodied methods in .NET as an alternative to traditional methods for creating simple functions. It presents a comparison between the two methods in terms of syntax and performance. Despite the syntactical differences, benchmark results show that both methods demonstrate similar performance characteristics.
Link to article: https://dotnettips.wordpress.com/2024/05/21/code-it-any-way-you-want-expression-bodied-methods-vs-traditional-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Retrieving the Nullable Value from a Reference Type</title>
      <link>https://www.dotnetramblings.com/post/20_05_2024/20_05_2024_11/</link>
      <pubDate>Mon, 20 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_05_2024/20_05_2024_11/</guid>
      <description>
        
          
            The article discusses two methods for retrieving nullable values from reference types in C#, showcasing examples using the ternary conditional expression and the null coalesce approach. Benchmark results indicate that the null coalesce approach demonstrates 1.12 times higher efficiency in performance compared to the ternary conditional expression.
Link to article: https://dotnettips.wordpress.com/2024/05/20/general-performance-tip-retrieving-the-nullable-value-from-a-reference-type/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>From Visual Basic to Visual Studio: A Journey Through Microsoft’s IDE Evolution</title>
      <link>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_2/</link>
      <pubDate>Sun, 19 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_2/</guid>
      <description>
        
          
            The author shares their journey from Visual Basic 2 in 1992 to the latest tools like Visual Studio and Visual Studio Code (VS Code). They emphasize the evolution of Microsoft&#39;s IDEs for software, web, and database development. They advocate for a hybrid approach of using IDEs for efficiency and familiarizing with CLI commands for flexibility.
Link to article: https://dotnettips.wordpress.com/2024/05/19/from-visual-basic-to-visual-studio-a-journey-through-microsofts-ide-evolution/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
