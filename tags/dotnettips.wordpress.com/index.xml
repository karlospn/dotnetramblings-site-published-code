<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 20 Apr 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Fastest Way to Get a Stringâ€™s Length in Microsoft .NET</title>
      <link>https://www.dotnetramblings.com/post/20_04_2025/20_04_2025_0/</link>
      <pubDate>Sun, 20 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_04_2025/20_04_2025_0/</guid>
      <description>
        
          
            This article analyzes the performance of different methods for retrieving the character count of a string in .NET, recommending the use of Length as the fastest option. Length is significantly more efficient than Span and Enumerable.Count(), urging developers to refactor for improved performance while validating optimizations with BenchmarkDotNet.
Link to article: https://dotnettips.wordpress.com/2025/04/20/the-fastest-way-to-get-a-strings-length-in-microsoft-net/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing IEnumerable Counting in Microsoft.NET: The Fastest Approach Revealed</title>
      <link>https://www.dotnetramblings.com/post/16_04_2025/16_04_2025_24/</link>
      <pubDate>Wed, 16 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_04_2025/16_04_2025_24/</guid>
      <description>
        
          
            To count elements in an IEnumerable collection, developers typically use the Count() method from System.Linq. Enumerable, with alternatives like TryGetNonEnumeratedCount() and LongCount() also available.
Link to article: https://dotnettips.wordpress.com/2025/04/16/optimizing-ienumerable-counting-in-microsoft-net-the-fastest-approach-revealed/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis: Best Practices and Performance for Comparing Strings</title>
      <link>https://www.dotnetramblings.com/post/13_04_2025/13_04_2025_0/</link>
      <pubDate>Sun, 13 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_04_2025/13_04_2025_0/</guid>
      <description>
        
          
            In .NET, string comparison can be performed using methods like ==, Equals(), and Compare(), each with distinct performance metrics. The most efficient method is Equals() with StringComparison. It&#39;s crucial to apply optimization practices for enhanced performance, especially in multilingual comparisons, and consider utilizing configuration files for consistent analysis.
Link to article: https://dotnettips.wordpress.com/2025/04/13/microsoft-net-code-analysis-best-practices-and-performance-for-comparing-strings/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
