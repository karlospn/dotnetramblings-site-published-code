<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 09 Mar 2025 07:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Hidden Key to App Stability: Why Data Validation in Model Classes Matters</title>
      <link>https://www.dotnetramblings.com/post/09_03_2025/09_03_2025_0/</link>
      <pubDate>Sun, 09 Mar 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/09_03_2025/09_03_2025_0/</guid>
      <description>
        
          
            The article emphasizes the critical importance of data validation within software development. It highlights that validation is often neglected, leading to significant issues related to application stability and data integrity. Multiple layers of validation are discussed, with a strong recommendation for prioritizing the Business Logic Layer to ensure consistent and secure data handling across applications.
Link to article: https://dotnettips.wordpress.com/2025/03/09/the-hidden-key-to-app-stability-why-data-validation-in-model-classes-matters/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis: Creating Empty Arrays</title>
      <link>https://www.dotnetramblings.com/post/05_03_2025/05_03_2025_12/</link>
      <pubDate>Wed, 05 Mar 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_03_2025/05_03_2025_12/</guid>
      <description>
        
          
            Arrays are a key collection type in .NET. There are three methods to create empty arrays: new string[0], Array.Empty(), and the concise [] expression. Benchmark tests show the [] expression is the fastest and most memory-efficient option. For improved performance, developers should adopt this method in their codebases.
Link to article: https://dotnettips.wordpress.com/2025/03/05/microsoft-net-code-analysis-creating-empty-arrays/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
