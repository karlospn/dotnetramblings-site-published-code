<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 08 Oct 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Defensive Programming with Microsoft .NET: Anticipate Errors and Eliminate Bugs</title>
      <link>https://www.dotnetramblings.com/post/08_10_2025/08_10_2025_11/</link>
      <pubDate>Wed, 08 Oct 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_10_2025/08_10_2025_11/</guid>
      <description>
        
          
            This discusses the principles of defensive programming to enhance software development. It emphasizes error prevention strategies such as input validation, comprehensive error handling, and assumption checking. By adopting these practices, developers can create reliable, maintainable applications, reduce bugs and their associated costs, and improve overall code quality and user satisfaction.
Link to article: https://dotnettips.wordpress.com/2025/10/08/defensive-programming-with-microsoft-net-anticipate-errors-and-eliminate-bugs/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Secure Passwords with PBKDF2PasswordHasher in Spargine</title>
      <link>https://www.dotnetramblings.com/post/05_10_2025/05_10_2025_0/</link>
      <pubDate>Sun, 05 Oct 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_10_2025/05_10_2025_0/</guid>
      <description>
        
          
            The PBKDF2PasswordHasher in Spargine is essential for securely handling passwords in modern applications. It uses the PBKDF2 algorithm to hash passwords with a unique salt and multiple iterations, making it resistant to brute-force attacks. Upcoming updates will enhance its versatility by supporting additional algorithms, ensuring future readiness.
Link to article: https://dotnettips.wordpress.com/2025/10/05/boost-your-net-projects-secure-passwords-with-pbkdf2passwordhasher-in-spargine/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Rock Your Code: Coding Standards for Microsoft .NET (20th Anniversary Edition)</title>
      <link>https://www.dotnetramblings.com/post/01_10_2025/01_10_2025_8/</link>
      <pubDate>Wed, 01 Oct 2025 12:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_10_2025/01_10_2025_8/</guid>
      <description>
        
          
            The 20th Anniversary Edition of Rock Your Code: Coding Standards for Microsoft .NET, authored by David McCarter, is now available on Amazon. This comprehensive guide offers updated standards for .NET 10, best practices, and expert insights, making it essential for software engineers aiming for improved code quality and performance over two decades.
Link to article: https://dotnettips.wordpress.com/2025/10/01/rock-your-code-coding-standards-for-microsoft-net-20th-anniversary-edition/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing Array Performance in .NET: Getting the Most from ArrayPool</title>
      <link>https://www.dotnetramblings.com/post/01_10_2025/01_10_2025_9/</link>
      <pubDate>Wed, 01 Oct 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_10_2025/01_10_2025_9/</guid>
      <description>
        
          
            ArrayPool optimizes memory usage by providing a thread-safe pool of reusable arrays, significantly reducing allocations and garbage collection pressure, especially in high-performance scenarios. It&#39;s effective for I/O, serialization, and media processing. Best practices include tight scope management, clearing sensitive data on return, and careful tracking of logical array lengths.
Link to article: https://dotnettips.wordpress.com/2025/10/01/optimizing-array-performance-in-net-getting-the-most-from-arraypool/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
