<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Fri, 03 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Performance Tip: Choosing Between Conditional Statements – If, Switch, and Switch Expression Performance in C#</title>
      <link>https://www.dotnetramblings.com/post/03_05_2024/03_05_2024_0/</link>
      <pubDate>Fri, 03 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/03_05_2024/03_05_2024_0/</guid>
      <description>
        
          
            This article compares the performance of conditional if statements, switch statements, and switch expressions in C# code, with a focus on data retrieval.
Link to article: https://dotnettips.wordpress.com/2024/05/03/general-performance-tip-choosing-between-conditional-statements-if-switch-and-switch-expression-performance-in-c/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing Code Performance: Leveraging Essential Tools and Best Practices</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_0/</link>
      <pubDate>Thu, 02 May 2024 19:35:37 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_0/</guid>
      <description>
        
          
            Experienced .NET developers rely on tools to quickly identify code issues, saving time and enabling focus on new features and customer satisfaction. Recommended tools address performance, code quality, and security, optimizing resource allocation.
Link to article: https://dotnettips.wordpress.com/2024/05/02/optimizing-code-performance-leveraging-essential-tools-and-best-practices/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis for Performance</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_1/</link>
      <pubDate>Thu, 02 May 2024 16:53:11 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_1/</guid>
      <description>
        
          
            The articles provide performance tips for Microsoft .NET, focusing on code analysis and benchmark data. They demonstrate settings to enhance application performance with examples. All recommendations relate to .NET 8.
Link to article: https://dotnettips.wordpress.com/2024/05/02/microsoft-net-code-analysis-for-performance/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Impact of Sealing Attributes</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_13/</link>
      <pubDate>Thu, 02 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_13/</guid>
      <description>
        
          
            When designing custom attributes, Microsoft recommends sealing them to potentially enhance performance. Do sealing attributes indeed lead to improved performance? Check out this article to learn the answer.
Link to article: https://dotnettips.wordpress.com/2024/05/02/code-it-any-way-you-want-performance-impact-of-sealing-attributes/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_2/</link>
      <pubDate>Wed, 01 May 2024 18:39:04 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_2/</guid>
      <description>
        
          
            These articles delves into performance optimization for collections in .NET, covering topics like looping, sorting, and utilizing different types of objects. The author identified performance variations related to the object type in the collection and recommends conducting benchmark tests. All recommendations are specific to .NET 8.
Link to article: https://dotnettips.wordpress.com/2024/05/01/collection-performance/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mastering Globalization</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_3/</link>
      <pubDate>Wed, 01 May 2024 18:06:24 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_3/</guid>
      <description>
        
          
            Internationalization and localization are crucial for software projects, involving adapting to various languages, regions, and technical requirements. Delaying consideration until later stages can lead to significant costs and effort. The importance of addressing globalization from the outset is emphasized, along with a recommendation to explore the book &amp;quot;Rock Your Code: Coding Standards for Microsoft .NET&amp;quot; for comprehensive insights.
Link to article: https://dotnettips.wordpress.com/2024/05/01/mastering-globalization/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Adobe Lightroom: Issues with Most Updates</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_14/</link>
      <pubDate>Wed, 01 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_14/</guid>
      <description>
        
          
            The article outlines the author&#39;s frustration with Adobe Lightroom Classic updates, citing issues like lost edits and export failures due to catalog format changes. They urge for better testing, maintenance of user setups, and swift bug resolution. Specific grievances include vanished settings, performance decline, and incompatibility with MacMini systems. The author emphasizes the need for Adobe to prioritize user experience to retain subscribers.
Link to article: https://dotnettips.wordpress.com/2024/05/01/adobe-lightroom-issues-with-most-updates/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Optimizing Enum Value Name Retrieval</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_15/</link>
      <pubDate>Wed, 01 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_15/</guid>
      <description>
        
          
            The article delves into the optimization of Enum value name retrieval in .NET, comparing three approaches. It demonstrates that one of these methods is 16.13 times more efficient, with no memory allocation.
Link to article: https://dotnettips.wordpress.com/2024/05/01/general-performance-tip-optimizing-enum-value-name-retrieval/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Reference Type &amp; Structure Performance</title>
      <link>https://www.dotnetramblings.com/post/30_04_2024/30_04_2024_0/</link>
      <pubDate>Tue, 30 Apr 2024 20:59:51 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_04_2024/30_04_2024_0/</guid>
      <description>
        
          
            These articles delve into strategies for optimizing the performance of your reference types and structures, also known as user-defined types. Both exhibit distinct behaviors, given that reference types are instantiated on the memory heap, overseen by the Garbage Collector, while structures are created on the memory stack, offering potentially superior performance.
Link to article: https://dotnettips.wordpress.com/2024/04/30/reference-type-structure-performance/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Optimizing Span Operations – Clear vs. Fill</title>
      <link>https://www.dotnetramblings.com/post/30_04_2024/30_04_2024_13/</link>
      <pubDate>Tue, 30 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_04_2024/30_04_2024_13/</guid>
      <description>
        
          
            This article compares two key search methods in dictionaries: using Contains() on the Keys collection and ContainsKey() method directly on the dictionary. It demonstrates examples for both approaches, highlighting Microsoft&#39;s recommendation of using ContainsKey(). The article suggests further examination of the performance aspect of these methods.
Link to article: https://dotnettips.wordpress.com/2024/04/30/code-it-any-way-you-want-optimizing-span-operations-clear-vs-fill-2/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Detecting Items in a ConcurrentBag&lt;&gt;</title>
      <link>https://www.dotnetramblings.com/post/29_04_2024/29_04_2024_13/</link>
      <pubDate>Mon, 29 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/29_04_2024/29_04_2024_13/</guid>
      <description>
        
          
            The comparison between using the Count property and the IsEmpty() method in a ConcurrentBag reveals that IsEmpty() is 2.95 times more efficient based on benchmark results. This indicates a significant performance advantage for utilizing IsEmpty().
Link to article: https://dotnettips.wordpress.com/2024/04/29/collection-performance-detecting-items-in-a-concurrentbag/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Is LINQ Always the Most Performant Choice?</title>
      <link>https://www.dotnetramblings.com/post/26_04_2024/26_04_2024_12/</link>
      <pubDate>Fri, 26 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_04_2024/26_04_2024_12/</guid>
      <description>
        
          
            The article explores the performance implications of using LINQ for collection queries, finding that a conventional foreach() loop outperforms LINQ by 1.75 times in identifying items matching a given query. The conclusion suggests benchmarking to determine the optimal approach based on the nature of the query and elements being sought.
Link to article: https://dotnettips.wordpress.com/2024/04/26/collection-performance-is-linq-always-the-most-performant-choice/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
