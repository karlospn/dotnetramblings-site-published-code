<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Fri, 21 Mar 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unlock Performance Gains in .NET: Evaluating the ‘in’ Modifier for Method Parameters</title>
      <link>https://www.dotnetramblings.com/post/21_03_2025/21_03_2025_3/</link>
      <pubDate>Fri, 21 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/21_03_2025/21_03_2025_3/</guid>
      <description>
        
          
            The in modifier, introduced in C# 9.0, allows passing read-only references to method parameters, promoting immutability. While it clarifies intent it can also enhance performance.
Link to article: https://dotnettips.wordpress.com/2025/03/21/unlock-performance-gains-in-net-evaluating-the-in-modifier-for-method-parameters/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis: Boosting  Performance with Span and Memory</title>
      <link>https://www.dotnetramblings.com/post/19_03_2025/19_03_2025_13/</link>
      <pubDate>Wed, 19 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_03_2025/19_03_2025_13/</guid>
      <description>
        
          
            Applications can significantly improve performance by leveraging newer types in Microsoft .NET, such as Span and Memory. These types minimize memory allocation and provide faster data access, making them essential tools for optimizing performance-critical applications. In this article, I will show you Microsoft’s recommended approach for converting a byte[] array to Span and Memory, and … Continue reading Microsoft .NET Code Analysis: Boosting Performance with Span and Memory →
Link to article: https://dotnettips.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Simplify File I/O with Spargine’s FileHelper</title>
      <link>https://www.dotnetramblings.com/post/16_03_2025/16_03_2025_0/</link>
      <pubDate>Sun, 16 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_03_2025/16_03_2025_0/</guid>
      <description>
        
          
            Spargine is a collection of open-source .NET 8 assemblies and NuGet packages, maintained since .NET 2. It includes the essential FileHelper for efficient file I/O operations on Windows, offering methods for file management, validation, and web downloads.
Link to article: https://dotnettips.wordpress.com/2025/03/16/boost-your-net-projects-simplify-file-i-o-with-spargines-filehelperhelper/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
