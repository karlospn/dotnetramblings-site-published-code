<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 29 Apr 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Collection Performance: Detecting Items in a ConcurrentBag&lt;&gt;</title>
      <link>https://www.dotnetramblings.com/post/29_04_2024/29_04_2024_1/</link>
      <pubDate>Mon, 29 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/29_04_2024/29_04_2024_1/</guid>
      <description>
        
          
            The comparison between using the Count property and the IsEmpty() method in a ConcurrentBag reveals that IsEmpty() is 2.95 times more efficient based on benchmark results. This indicates a significant performance advantage for utilizing IsEmpty().
Link to article: https://dotnettips.wordpress.com/2024/04/29/collection-performance-detecting-items-in-a-concurrentbag/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Is LINQ Always the Most Performant Choice?</title>
      <link>https://www.dotnetramblings.com/post/26_04_2024/26_04_2024_12/</link>
      <pubDate>Fri, 26 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_04_2024/26_04_2024_12/</guid>
      <description>
        
          
            The article explores the performance implications of using LINQ for collection queries, finding that a conventional foreach() loop outperforms LINQ by 1.75 times in identifying items matching a given query. The conclusion suggests benchmarking to determine the optimal approach based on the nature of the query and elements being sought.
Link to article: https://dotnettips.wordpress.com/2024/04/26/collection-performance-is-linq-always-the-most-performant-choice/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Comparison of Passing Parameters in Methods</title>
      <link>https://www.dotnetramblings.com/post/25_04_2024/25_04_2024_12/</link>
      <pubDate>Thu, 25 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/25_04_2024/25_04_2024_12/</guid>
      <description>
        
          
            This article explores different methods of passing parameters into methods, including conventional, in operator, and ref readonly approaches, comparing their performance. Despite differences in syntax, benchmark results demonstrate similar performance among these methods.
Link to article: https://dotnettips.wordpress.com/2024/04/25/code-it-any-way-you-want-comparison-of-passing-parameters-in-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance: Choosing Between GetValueOrDefault() and Coalesce Operator for Nullable Integers</title>
      <link>https://www.dotnetramblings.com/post/24_04_2024/24_04_2024_14/</link>
      <pubDate>Wed, 24 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_04_2024/24_04_2024_14/</guid>
      <description>
        
          
            In dealing with nullable integers and the need for default values, two common approaches are the coalesce operator (??) and GetValueOrDefault(). Alternatively, utilizing HasValue with the conditional operator is demonstrated.
Link to article: https://dotnettips.wordpress.com/2024/04/24/general-performance-choosing-between-getvalueordefault-and-coalesce-operator-for-nullable-integers/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Optimal Parameter Passing â€“ Array vs. Params Keyword</title>
      <link>https://www.dotnetramblings.com/post/23_04_2024/23_04_2024_0/</link>
      <pubDate>Tue, 23 Apr 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_04_2024/23_04_2024_0/</guid>
      <description>
        
          
            The article explores the performance differences between passing parameters as arrays or using the params keyword in C#. Despite similarities in speed, the author recommends using the params keyword for its ease of use during function calls.
Link to article: https://dotnettips.wordpress.com/2024/04/23/code-it-any-way-you-want-optimal-parameter-passing-array-vs-params-keyword/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Creating a List&lt;&gt; Using The Task.Parallel Library</title>
      <link>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</link>
      <pubDate>Mon, 22 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</guid>
      <description>
        
          
            The post discusses alternative approaches to adding items to a collection using For() or ForEach() from the Task Parallel Library.
Link to article: https://dotnettips.wordpress.com/2024/04/22/collection-performance-creating-a-list-using-the-task-parallel-library/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
