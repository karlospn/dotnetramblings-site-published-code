<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 05 Mar 2025 07:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microsoft .NET Code Analysis: Creating Empty Arrays</title>
      <link>https://www.dotnetramblings.com/post/05_03_2025/05_03_2025_12/</link>
      <pubDate>Wed, 05 Mar 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_03_2025/05_03_2025_12/</guid>
      <description>
        
          
            Arrays are a key collection type in .NET. There are three methods to create empty arrays: new string[0], Array.Empty(), and the concise [] expression. Benchmark tests show the [] expression is the fastest and most memory-efficient option. For improved performance, developers should adopt this method in their codebases.
Link to article: https://dotnettips.wordpress.com/2025/03/05/microsoft-net-code-analysis-creating-empty-arrays/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Unlock Performance Gains in .NET: The Power of Custom Comparers</title>
      <link>https://www.dotnetramblings.com/post/02_03_2025/02_03_2025_1/</link>
      <pubDate>Sun, 02 Mar 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_03_2025/02_03_2025_1/</guid>
      <description>
        
          
            This article highlights the importance of custom comparers in .NET for enhancing application performance when sorting and ordering collections. It discusses the flexibility and control that custom comparers offer over default comparers and provides examples of creating them. Benchmarks also illustrate the performance benefits, while cautioning that custom comparers may introduce overhead in certain scenarios.
Link to article: https://dotnettips.wordpress.com/2025/03/02/unlock-performance-gains-in-net-the-power-of-custom-comparers/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
