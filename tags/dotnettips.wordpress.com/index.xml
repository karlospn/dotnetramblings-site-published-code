<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 26 Mar 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microsoft .NET Code Analysis: Improving Performance with Count() and LongCount() vs Any()</title>
      <link>https://www.dotnetramblings.com/post/26_03_2025/26_03_2025_11/</link>
      <pubDate>Wed, 26 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_03_2025/26_03_2025_11/</guid>
      <description>
        
          
            In Microsoft .NET, checking if an IEnumerable contains items can be done using Count(), LongCount(), or Any(). Despite Microsoft’s recommendation to use Any() for efficiency, benchmarks reveal Count() is faster. For optimal performance, it’s advised to benchmark methods contextually. Resources for further learning and performance optimization are provided.
Link to article: https://dotnettips.wordpress.com/2025/03/26/microsoft-net-code-analysis-improving-performance-with-count-and-longcount-vs-any/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Simplify StringBuilder Usage with Spargine’s StringBuilderExtensions</title>
      <link>https://www.dotnetramblings.com/post/23_03_2025/23_03_2025_0/</link>
      <pubDate>Sun, 23 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_03_2025/23_03_2025_0/</guid>
      <description>
        
          
            Spargine is a collection of open-source assemblies and NuGet packages for .NET 8, created by the author since .NET 2&#39;s launch. The StringBuilderExtensions enhance StringBuilder&#39;s performance and usability, featuring methods for efficient data appending.
Link to article: https://dotnettips.wordpress.com/2025/03/23/boost-your-net-projects-simplify-stringbuilder-usage-with-spargines-stringbuilderextensions/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Unlock Performance Gains in .NET: Evaluating the ‘in’ Modifier for Method Parameters</title>
      <link>https://www.dotnetramblings.com/post/21_03_2025/21_03_2025_11/</link>
      <pubDate>Fri, 21 Mar 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/21_03_2025/21_03_2025_11/</guid>
      <description>
        
          
            The in modifier, introduced in C# 9.0, allows passing read-only references to method parameters, promoting immutability. While it clarifies intent it can also enhance performance.
Link to article: https://dotnettips.wordpress.com/2025/03/21/unlock-performance-gains-in-net-evaluating-the-in-modifier-for-method-parameters/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
