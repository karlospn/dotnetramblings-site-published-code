<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 23 Apr 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unlocking Hidden Performance in Microsoft .NET: Iterating Over IEnumerable with the Enumerator</title>
      <link>https://www.dotnetramblings.com/post/23_04_2025/23_04_2025_2/</link>
      <pubDate>Wed, 23 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_04_2025/23_04_2025_2/</guid>
      <description>
        
          
            The article discusses the performance benefits of using an Enumerator to iterate over an IEnumerable collection, which can be faster than traditional foreach() or for() loops.
Link to article: https://dotnettips.wordpress.com/2025/04/23/unlocking-hidden-performance-in-microsoft-net-iterating-over-ienumerable-with-the-enumerator/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>The Fastest Way to Get a Stringâ€™s Length in Microsoft .NET</title>
      <link>https://www.dotnetramblings.com/post/20_04_2025/20_04_2025_1/</link>
      <pubDate>Sun, 20 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_04_2025/20_04_2025_1/</guid>
      <description>
        
          
            This article analyzes the performance of different methods for retrieving the character count of a string in .NET, recommending the use of Length as the fastest option. Length is significantly more efficient than Span and Enumerable.Count(), urging developers to refactor for improved performance while validating optimizations with BenchmarkDotNet.
Link to article: https://dotnettips.wordpress.com/2025/04/20/the-fastest-way-to-get-a-strings-length-in-microsoft-net/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing IEnumerable Counting in Microsoft.NET: The Fastest Approach Revealed</title>
      <link>https://www.dotnetramblings.com/post/16_04_2025/16_04_2025_24/</link>
      <pubDate>Wed, 16 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_04_2025/16_04_2025_24/</guid>
      <description>
        
          
            To count elements in an IEnumerable collection, developers typically use the Count() method from System.Linq. Enumerable, with alternatives like TryGetNonEnumeratedCount() and LongCount() also available.
Link to article: https://dotnettips.wordpress.com/2025/04/16/optimizing-ienumerable-counting-in-microsoft-net-the-fastest-approach-revealed/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
