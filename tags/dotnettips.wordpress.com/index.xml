<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 19 May 2024 08:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Visual Basic to Visual Studio: A Journey Through Microsoftâ€™s IDE Evolution</title>
      <link>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_0/</link>
      <pubDate>Sun, 19 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/19_05_2024/19_05_2024_0/</guid>
      <description>
        
          
            The author shares their journey from Visual Basic 2 in 1992 to the latest tools like Visual Studio and Visual Studio Code (VS Code). They emphasize the evolution of Microsoft&#39;s IDEs for software, web, and database development. They advocate for a hybrid approach of using IDEs for efficiency and familiarizing with CLI commands for flexibility.
Link to article: https://dotnettips.wordpress.com/2024/05/19/from-visual-basic-to-visual-studio-a-journey-through-microsofts-ide-evolution/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dotNetDave Rocks The Bay.NET User Group</title>
      <link>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_0/</link>
      <pubDate>Fri, 17 May 2024 18:14:08 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_0/</guid>
      <description>
        
          
            The dotNetDave No Rest for the Wicked World Tour is holding a virtual session on code and app performance for Microsoft .NET, tailored to .NET 8, on June 20th. The session will cover optimizing code performance and minimizing memory footprint, with insights from the latest performance metrics outlined in the fourth edition of &amp;quot;Rock Your Code: Code &amp;amp; App Performance for Microsoft&amp;quot;. For more details, visit https://www.meetup.com/baynet/events/301041843.
Link to article: https://dotnettips.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Exercise Caution When Using Take() with a Basic Count</title>
      <link>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_9/</link>
      <pubDate>Fri, 17 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_05_2024/17_05_2024_9/</guid>
      <description>
        
          
            The article advises caution when using the LINQ method Take() with a basic count, suggesting that a range might be recommended by code analyzers. However, benchmark results indicate that using Take() with a simple count is 1.63 times faster than employing a range in such cases.
Link to article: https://dotnettips.wordpress.com/2024/05/17/collection-performance-exercise-caution-when-using-take-with-a-basic-count/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Difference Between Static and Non-Static Methods</title>
      <link>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_15/</link>
      <pubDate>Thu, 16 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_15/</guid>
      <description>
        
          
            The article explores the performance disparity between static and non-static methods, commonly recommended for efficiency by code analysis tools.
Link to article: https://dotnettips.wordpress.com/2024/05/16/code-it-any-way-you-want-performance-difference-between-static-and-non-static-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Looping Over a Collection Using Span and ReadOnlySpan</title>
      <link>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</link>
      <pubDate>Wed, 15 May 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</guid>
      <description>
        
          
            The article explores the performance benefits of utilizing Span and ReadOnlySpan for collection processing, highlighting advantages such as improved performance, reduced memory pressure, enhanced safety, and compatibility with modern API design. Span allows read-write access and efficient iteration with lightweight storage, while ReadOnlySpan provides read-only access to prevent accidental modifications, offering similar benefits for collection processing.
Link to article: https://dotnettips.wordpress.com/2024/05/15/collection-performance-looping-over-a-collection-using-span-and-readonlyspan/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Considerations for Sealed and Internal Classes</title>
      <link>https://www.dotnetramblings.com/post/14_05_2024/14_05_2024_14/</link>
      <pubDate>Tue, 14 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/14_05_2024/14_05_2024_14/</guid>
      <description>
        
          
            This article explores the historical belief that sealed and internal classes in .NET might offer performance advantages, but suggests that in modern .NET runtimes, compiler optimizations, and hardware advancements, the difference in performance is likely negligible, emphasizing that design considerations should drive decisions regarding class sealing or internalization rather than performance concerns.
Link to article: https://dotnettips.wordpress.com/2024/05/14/code-it-any-way-you-want-performance-considerations-for-sealed-and-internal-classes/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Optimizing Sequence Comparison</title>
      <link>https://www.dotnetramblings.com/post/13_05_2024/13_05_2024_11/</link>
      <pubDate>Mon, 13 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_05_2024/13_05_2024_11/</guid>
      <description>
        
          
            The article discusses different methods for comparing two collections for identity in programming. It introduces the use of the SequenceEqual() method for comparing sequences in the LINQ extension methods, as well as the StructuralSequenceEqual() method, which is beneficial for comparing custom classes based on the values of their elements rather than object references.
Link to article: https://dotnettips.wordpress.com/2024/05/13/collection-performance-optimizing-sequence-comparison/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
