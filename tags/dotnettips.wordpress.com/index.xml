<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 08 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String Performance: Checking for a Character</title>
      <link>https://www.dotnetramblings.com/post/08_05_2024/08_05_2024_14/</link>
      <pubDate>Wed, 08 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_05_2024/08_05_2024_14/</guid>
      <description>
        
          
            The article compares two methods of checking for the presence of a specific character in a string in C#. Benchmark results reveal that using a character in the search is 3.57 times more efficient than using a string, and Contains() outperforms StringComparison.Ordinal and StringComparison.OrdinalIgnoreCase in terms of speed.
Link to article: https://dotnettips.wordpress.com/2024/05/08/string-performance-checking-for-a-character-2/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dotNetDave Rocks The Austin .NET User Group (2024)</title>
      <link>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_6/</link>
      <pubDate>Tue, 07 May 2024 17:17:10 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_6/</guid>
      <description>
        
          
            The dotNetDave No Rest for the Wicked World Tour is coming to the Austin .NET User Group in Texas on May 9th. This session will focus on code and app performance for Microsoft .NET, covering efficient code execution and techniques for minimizing memory footprint. Watch the live session and access related resources to optimize code performance.
Link to article: https://dotnettips.wordpress.com/2024/05/07/dotnetdave-rocks-the-austin-net-user-group-2024/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Constants vs. Read-only Fields</title>
      <link>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_13/</link>
      <pubDate>Tue, 07 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_05_2024/07_05_2024_13/</guid>
      <description>
        
          
            The article discusses best practices for checking strings for null in coding. It outlines three common methods: using == null, is null, or string.IsNullOrEmpty().
Link to article: https://dotnettips.wordpress.com/2024/05/07/code-it-any-way-you-want-constants-vs-read-only-fields/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Leveraging LINQ MAXBy() and MINBy() for Efficient and Readable Code</title>
      <link>https://www.dotnetramblings.com/post/06_05_2024/06_05_2024_5/</link>
      <pubDate>Mon, 06 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_05_2024/06_05_2024_5/</guid>
      <description>
        
          
            The article explores the usage of LINQ&#39;s MinBy() and MaxBy() methods, which efficiently return the objects with the minimum and maximum values in a sequence based on a specified key selector function.
Link to article: https://dotnettips.wordpress.com/2024/05/06/collection-performance-leveraging-linq-maxby-and-minby-for-efficient-and-readable-code/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Rock Your Code: Code &amp; App Performance for Microsoft .NET (4th Edition)</title>
      <link>https://www.dotnetramblings.com/post/05_05_2024/05_05_2024_0/</link>
      <pubDate>Sun, 05 May 2024 15:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_05_2024/05_05_2024_0/</guid>
      <description>
        
          
            &amp;quot;Rock Your Code: Code &amp;amp; App Performance for Microsoft .NET&amp;quot; is a comprehensive guide that emphasizes the importance of optimizing code performance for enhanced user experience and backend efficiency. With practical insights and example code, developers learn essential practices for maximizing the performance of their business applications within the Microsoft .NET framework. From string manipulation to leveraging source generators, this edition covers a wide range of topics, including new chapters on code analysis and benchmark testing.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Coding Faster with dotNetTips.com Spargine 8:  May 2024 Release</title>
      <link>https://www.dotnetramblings.com/post/05_05_2024/05_05_2024_1/</link>
      <pubDate>Sun, 05 May 2024 14:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_05_2024/05_05_2024_1/</guid>
      <description>
        
          
            Spargine 8 (v2024.8.5.1) was released on May 5th, 2024, offering NuGet packages for .NET 8. This update includes new methods, benchmarks, and unit tests, integrating speed enhancements informed by benchmark tests outlined in the 4th edition of Rock Your Code. Notably, it introduces the CopyFile method in the FileHelper class and performance improvements in various methods. You can find the performance data on GitHub. Contributing to these projects is encouraged. Check out the GitHub release page for more information.
          
          
        
      </description>
    </item>
    
    <item>
      <title>TeenSaver: Support The Kids In your Life Who have never Seen a Screensaver</title>
      <link>https://www.dotnetramblings.com/post/04_05_2024/04_05_2024_0/</link>
      <pubDate>Sat, 04 May 2024 18:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/04_05_2024/04_05_2024_0/</guid>
      <description>
        
          
            This spoof commercial aims to raise awareness about teenagers who have never seen a screensaver.
Link to article: https://dotnettips.wordpress.com/2024/05/04/teensaver-support-the-kids-in-your-life-who-have-never-seen-a-screensaver/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Choosing Between Conditional Statements – If, Switch, and Switch Expression Performance in C#</title>
      <link>https://www.dotnetramblings.com/post/03_05_2024/03_05_2024_9/</link>
      <pubDate>Fri, 03 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/03_05_2024/03_05_2024_9/</guid>
      <description>
        
          
            This article compares the performance of conditional if statements, switch statements, and switch expressions in C# code, with a focus on data retrieval.
Link to article: https://dotnettips.wordpress.com/2024/05/03/general-performance-tip-choosing-between-conditional-statements-if-switch-and-switch-expression-performance-in-c/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing Code Performance: Leveraging Essential Tools and Best Practices</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_0/</link>
      <pubDate>Thu, 02 May 2024 19:35:37 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_0/</guid>
      <description>
        
          
            Experienced .NET developers rely on tools to quickly identify code issues, saving time and enabling focus on new features and customer satisfaction. Recommended tools address performance, code quality, and security, optimizing resource allocation.
Link to article: https://dotnettips.wordpress.com/2024/05/02/optimizing-code-performance-leveraging-essential-tools-and-best-practices/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis for Performance</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_1/</link>
      <pubDate>Thu, 02 May 2024 16:53:11 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_1/</guid>
      <description>
        
          
            The articles provide performance tips for Microsoft .NET, focusing on code analysis and benchmark data. They demonstrate settings to enhance application performance with examples. All recommendations relate to .NET 8.
Link to article: https://dotnettips.wordpress.com/2024/05/02/microsoft-net-code-analysis-for-performance/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Impact of Sealing Attributes</title>
      <link>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_13/</link>
      <pubDate>Thu, 02 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_05_2024/02_05_2024_13/</guid>
      <description>
        
          
            When designing custom attributes, Microsoft recommends sealing them to potentially enhance performance. Do sealing attributes indeed lead to improved performance? Check out this article to learn the answer.
Link to article: https://dotnettips.wordpress.com/2024/05/02/code-it-any-way-you-want-performance-impact-of-sealing-attributes/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_2/</link>
      <pubDate>Wed, 01 May 2024 18:39:04 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_2/</guid>
      <description>
        
          
            These articles delves into performance optimization for collections in .NET, covering topics like looping, sorting, and utilizing different types of objects. The author identified performance variations related to the object type in the collection and recommends conducting benchmark tests. All recommendations are specific to .NET 8.
Link to article: https://dotnettips.wordpress.com/2024/05/01/collection-performance/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mastering Globalization</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_3/</link>
      <pubDate>Wed, 01 May 2024 18:06:24 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_3/</guid>
      <description>
        
          
            Internationalization and localization are crucial for software projects, involving adapting to various languages, regions, and technical requirements. Delaying consideration until later stages can lead to significant costs and effort. The importance of addressing globalization from the outset is emphasized, along with a recommendation to explore the book &amp;quot;Rock Your Code: Coding Standards for Microsoft .NET&amp;quot; for comprehensive insights.
Link to article: https://dotnettips.wordpress.com/2024/05/01/mastering-globalization/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Adobe Lightroom: Issues with Most Updates</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_14/</link>
      <pubDate>Wed, 01 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_14/</guid>
      <description>
        
          
            The article outlines the author&#39;s frustration with Adobe Lightroom Classic updates, citing issues like lost edits and export failures due to catalog format changes. They urge for better testing, maintenance of user setups, and swift bug resolution. Specific grievances include vanished settings, performance decline, and incompatibility with MacMini systems. The author emphasizes the need for Adobe to prioritize user experience to retain subscribers.
Link to article: https://dotnettips.wordpress.com/2024/05/01/adobe-lightroom-issues-with-most-updates/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Optimizing Enum Value Name Retrieval</title>
      <link>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_15/</link>
      <pubDate>Wed, 01 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_05_2024/01_05_2024_15/</guid>
      <description>
        
          
            The article delves into the optimization of Enum value name retrieval in .NET, comparing three approaches. It demonstrates that one of these methods is 16.13 times more efficient, with no memory allocation.
Link to article: https://dotnettips.wordpress.com/2024/05/01/general-performance-tip-optimizing-enum-value-name-retrieval/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
