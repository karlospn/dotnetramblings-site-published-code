<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 13 Apr 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microsoft .NET Code Analysis: Best Practices and Performance for Comparing Strings</title>
      <link>https://www.dotnetramblings.com/post/13_04_2025/13_04_2025_0/</link>
      <pubDate>Sun, 13 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_04_2025/13_04_2025_0/</guid>
      <description>
        
          
            In .NET, string comparison can be performed using methods like ==, Equals(), and Compare(), each with distinct performance metrics. The most efficient method is Equals() with StringComparison. It&#39;s crucial to apply optimization practices for enhanced performance, especially in multilingual comparisons, and consider utilizing configuration files for consistent analysis.
Link to article: https://dotnettips.wordpress.com/2025/04/13/microsoft-net-code-analysis-best-practices-and-performance-for-comparing-strings/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Retry Logic Made Easy with Spargineâ€™s ExecutionHelper</title>
      <link>https://www.dotnetramblings.com/post/09_04_2025/09_04_2025_17/</link>
      <pubDate>Wed, 09 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/09_04_2025/09_04_2025_17/</guid>
      <description>
        
          
            Spargine is a collection of open-source .NET assemblies and NuGet packages designed for enhanced functionality, featuring the ExecutionHelper methods: ProgressiveRetry() and ProgressiveRetryAsync(). These methods manage transient operation failures with retry logic and progressive delays. Additionally, proactive resource checks like IsNetworkAvailable() improve application reliability by checking resource availability before retrying.
Link to article: https://dotnettips.wordpress.com/2025/04/09/boost-your-net-projects-retry-logic-made-easy-with-spargines-executionhelper/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Comparing Type Checking Methods in .NET: Performance vs. Readability</title>
      <link>https://www.dotnetramblings.com/post/06_04_2025/06_04_2025_0/</link>
      <pubDate>Sun, 06 Apr 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/06_04_2025/06_04_2025_0/</guid>
      <description>
        
          
            In .NET, type checking methods include GetType(), the is keyword, IsAssignableFrom(), and the as keyword. Each method varies in readability and performance.
Link to article: https://dotnettips.wordpress.com/2025/04/06/comparing-type-checking-methods-in-net-performance-vs-readability/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
