<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Thu, 16 May 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code It Any Way You Want: Performance Difference Between Static and Non-Static Methods</title>
      <link>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_9/</link>
      <pubDate>Thu, 16 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_05_2024/16_05_2024_9/</guid>
      <description>
        
          
            The article explores the performance disparity between static and non-static methods, commonly recommended for efficiency by code analysis tools.
Link to article: https://dotnettips.wordpress.com/2024/05/16/code-it-any-way-you-want-performance-difference-between-static-and-non-static-methods/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Looping Over a Collection Using Span and ReadOnlySpan</title>
      <link>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</link>
      <pubDate>Wed, 15 May 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_05_2024/15_05_2024_2/</guid>
      <description>
        
          
            The article explores the performance benefits of utilizing Span and ReadOnlySpan for collection processing, highlighting advantages such as improved performance, reduced memory pressure, enhanced safety, and compatibility with modern API design. Span allows read-write access and efficient iteration with lightweight storage, while ReadOnlySpan provides read-only access to prevent accidental modifications, offering similar benefits for collection processing.
Link to article: https://dotnettips.wordpress.com/2024/05/15/collection-performance-looping-over-a-collection-using-span-and-readonlyspan/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Performance Considerations for Sealed and Internal Classes</title>
      <link>https://www.dotnetramblings.com/post/14_05_2024/14_05_2024_14/</link>
      <pubDate>Tue, 14 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/14_05_2024/14_05_2024_14/</guid>
      <description>
        
          
            This article explores the historical belief that sealed and internal classes in .NET might offer performance advantages, but suggests that in modern .NET runtimes, compiler optimizations, and hardware advancements, the difference in performance is likely negligible, emphasizing that design considerations should drive decisions regarding class sealing or internalization rather than performance concerns.
Link to article: https://dotnettips.wordpress.com/2024/05/14/code-it-any-way-you-want-performance-considerations-for-sealed-and-internal-classes/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Optimizing Sequence Comparison</title>
      <link>https://www.dotnetramblings.com/post/13_05_2024/13_05_2024_11/</link>
      <pubDate>Mon, 13 May 2024 08:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_05_2024/13_05_2024_11/</guid>
      <description>
        
          
            The article discusses different methods for comparing two collections for identity in programming. It introduces the use of the SequenceEqual() method for comparing sequences in the LINQ extension methods, as well as the StructuralSequenceEqual() method, which is beneficial for comparing custom classes based on the values of their elements rather than object references.
Link to article: https://dotnettips.wordpress.com/2024/05/13/collection-performance-optimizing-sequence-comparison/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>General Performance Tip: Type Conversion</title>
      <link>https://www.dotnetramblings.com/post/10_05_2024/10_05_2024_8/</link>
      <pubDate>Fri, 10 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_05_2024/10_05_2024_8/</guid>
      <description>
        
          
            This article explores type conversion in programming, comparing the traditional syntax with the newer &amp;quot;as&amp;quot; keyword in .NET. While the &amp;quot;as&amp;quot; keyword improves code readability, benchmark results suggest that the conventional method is slightly more performant, advising developers to stick with traditional type conversion unless significant performance improvements are observed with the &amp;quot;as&amp;quot; keyword.
Link to article: https://dotnettips.wordpress.com/2024/05/10/general-performance-tip-type-conversion/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Reference Type &amp; Structure Performance: Constant vs. Read-only Property</title>
      <link>https://www.dotnetramblings.com/post/09_05_2024/09_05_2024_12/</link>
      <pubDate>Thu, 09 May 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/09_05_2024/09_05_2024_12/</guid>
      <description>
        
          
            This content discusses the performance of using a constant vs. a read-only property.
Link to article: https://dotnettips.wordpress.com/2024/05/09/reference-type-structure-performance-constant-vs-read-only-property/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
