<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 07 Sep 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boost Your .NET Projects: Efficient Byte Array Conversions</title>
      <link>https://www.dotnetramblings.com/post/07_09_2025/07_09_2025_0/</link>
      <pubDate>Sun, 07 Sep 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/07_09_2025/07_09_2025_0/</guid>
      <description>
        
          
            When working with byte arrays in performance-critical applications, every nanosecond and allocation counts. Fortunately, in .NET, there is a class that provides several high-performance methods that can significantly improve speed and reduce memory overhead when converting and manipulating arrays.
Link to article: https://dotnettips.wordpress.com/2025/09/07/boost-your-net-projects-efficient-byte-array-conversions/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Find the Fastest Way to Get an Itemâ€™s Index in Arrays</title>
      <link>https://www.dotnetramblings.com/post/31_08_2025/31_08_2025_1/</link>
      <pubDate>Sun, 31 Aug 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/31_08_2025/31_08_2025_1/</guid>
      <description>
        
          
            This article examines the performance of three index-finding methods in .NET arrays: Array.BinarySearch (O(log n)), Array.FindIndex (O(n)), and Array.IndexOf (O(n)).
Link to article: https://dotnettips.wordpress.com/2025/08/31/boost-your-net-projects-find-the-fastest-way-to-get-an-items-index-in-arrays/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
