<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 20 Jul 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boost Your .NET Projects: Effortlessly Randomize Collections with CollectionRandomizer in Spargine</title>
      <link>https://www.dotnetramblings.com/post/20_07_2025/20_07_2025_0/</link>
      <pubDate>Sun, 20 Jul 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_07_2025/20_07_2025_0/</guid>
      <description>
        
          
            CollectionRandomizer is a new utility class for .NET that simplifies working with randomized collections. It supports infinite looping and automatic reshuffling, making it ideal for dynamic UI components and rotating messages. This lightweight, thread-safe class is production-ready and streamlines the process of retrieving random items efficiently.
Link to article: https://dotnettips.wordpress.com/2025/07/20/boost-your-net-projects-effortlessly-randomize-collections-with-collectionrandomizer-in-spargine/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Still Compiling: Two Shirts Every Veteran Software Engineer Needs</title>
      <link>https://www.dotnetramblings.com/post/17_07_2025/17_07_2025_3/</link>
      <pubDate>Thu, 17 Jul 2025 17:43:18 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_07_2025/17_07_2025_3/</guid>
      <description>
        
          
            The new t-shirt designs celebrate seasoned software engineers surviving industry challenges like Y2K and IE6. The Vintage Tech Emblem Tee and Embroidered Patch Edition embody resilience and experience, emphasizing their importance in producing reliable code. These shirts serve as a declaration of enduring value in a technology-driven world.
Link to article: https://dotnettips.wordpress.com/2025/07/17/still-compiling-two-shirts-every-veteran-software-engineer-needs/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>The Day the Software Community Died: Let’s Stop Coding in Isolation and Start Creating Community—And Software—People Truly Love</title>
      <link>https://www.dotnetramblings.com/post/16_07_2025/16_07_2025_13/</link>
      <pubDate>Wed, 16 Jul 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_07_2025/16_07_2025_13/</guid>
      <description>
        
          
            The author reflects on the vital role of the software community in shaping their career as an engineer, emphasizing its decline post-COVID-19. They highlight the diminishing local user groups and conferences, attributing this to a lack of appreciation from younger developers and reduced corporate support, particularly from Microsoft. A call to action urges developers to engage, companies to invest, and veterans to mentor, reinforcing the importance of community in fostering quality software.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Boost Your .NET Projects: Add Thread-Safety with ConcurrentHashSet from Spargine</title>
      <link>https://www.dotnetramblings.com/post/13_07_2025/13_07_2025_0/</link>
      <pubDate>Sun, 13 Jul 2025 06:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_07_2025/13_07_2025_0/</guid>
      <description>
        
          
            The HashSet in .NET is efficient for storing unique elements but is not thread-safe. To overcome this issue, ConcurrentHashSet was created, offering thread-safe operations while maintaining HashSet behavior. It features various constructors, supports custom comparers, and includes methods for adding, removing, and checking elements. Available via NuGet.
Link to article: https://dotnettips.wordpress.com/2025/07/13/boost-your-net-projects-add-thread-safety-with-concurrenthashset-from-spargine/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
