<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sat, 01 Feb 2025 07:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding Faster with dotNetTips.com Spargine 8: February 2025 Release</title>
      <link>https://www.dotnetramblings.com/post/01_02_2025/01_02_2025_1/</link>
      <pubDate>Sat, 01 Feb 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_02_2025/01_02_2025_1/</guid>
      <description>
        
          
            Spargine 8 (v2025.8.2.1) was released on February 1, 2025, featuring NuGet packages for .NET 8 &amp;amp; 9, new classes, methods, and performance enhancements. Key additions include AutoDefaultDictionary and various comparers. The update also enhances country validation methods and dictionary functionalities. Community contributions are encouraged for future improvements.
Link to article: https://dotnettips.wordpress.com/2025/02/01/coding-faster-with-dotnettips-com-spargine-8-february-2025-release/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Optimizing Dictionary Performance in .NET: SortedDictionary vs. Dictionary</title>
      <link>https://www.dotnetramblings.com/post/26_01_2025/26_01_2025_1/</link>
      <pubDate>Sun, 26 Jan 2025 13:40:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_01_2025/26_01_2025_1/</guid>
      <description>
        
          
            The article analyzes performance issues in .NET code using SortedDictionary. It recommends using Dictionary for single sorting needs and compares various sorting techniques. Benchmark results reveal that sorting keys separately and iterating is fastest, while SortedDictionary excels with foreach loops. Careful choice of dictionary type affects performance and memory allocation.
Link to article: https://dotnettips.wordpress.com/2025/01/26/optimizing-dictionary-performance-in-net-sorteddictionary-vs-dictionary/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
