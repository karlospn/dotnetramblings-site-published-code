<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 20 Jan 2025 07:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boost Your .NET Projects: Unleashing the Power of Spargineâ€™s FastSortedList</title>
      <link>https://www.dotnetramblings.com/post/20_01_2025/20_01_2025_1/</link>
      <pubDate>Mon, 20 Jan 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/20_01_2025/20_01_2025_1/</guid>
      <description>
        
          
            Spargine is a set of open-source .NET 8 packages created by the author since .NET 2, currently in production. It includes the EncryptionHelper class, which offers efficient methods for data encryption, key generation, and password verification.
Link to article: https://dotnettips.wordpress.com/2025/01/20/boost-your-net-projects-unleashing-the-power-of-spargines-fastsortedlist/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Stop the Leaks: Properly Disposing Objects in .NET</title>
      <link>https://www.dotnetramblings.com/post/13_01_2025/13_01_2025_9/</link>
      <pubDate>Mon, 13 Jan 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/13_01_2025/13_01_2025_9/</guid>
      <description>
        
          
            The article highlights the persistent issue of failing to call Dispose() on disposable objects in .NET projects, which leads to memory leaks and system instability. The author recommends using IDisposableAnalyzers and memory profilers to detect these issues, alongside custom extension methods for easier disposal management, advocating for proactive solutions to maintain application performance.
Link to article: https://dotnettips.wordpress.com/2025/01/13/stop-the-leaks-properly-disposing-objects-in-net/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
