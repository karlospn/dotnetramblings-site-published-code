<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sun, 02 Mar 2025 07:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unlock Performance Gains in .NET: The Power of Custom Comparers</title>
      <link>https://www.dotnetramblings.com/post/02_03_2025/02_03_2025_0/</link>
      <pubDate>Sun, 02 Mar 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/02_03_2025/02_03_2025_0/</guid>
      <description>
        
          
            This article highlights the importance of custom comparers in .NET for enhancing application performance when sorting and ordering collections. It discusses the flexibility and control that custom comparers offer over default comparers and provides examples of creating them. Benchmarks also illustrate the performance benefits, while cautioning that custom comparers may introduce overhead in certain scenarios.
Link to article: https://dotnettips.wordpress.com/2025/03/02/unlock-performance-gains-in-net-the-power-of-custom-comparers/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Microsoft .NET Code Analysis: Optimizing JSON Serialization with Cached Options</title>
      <link>https://www.dotnetramblings.com/post/26_02_2025/26_02_2025_11/</link>
      <pubDate>Wed, 26 Feb 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/26_02_2025/26_02_2025_11/</guid>
      <description>
        
          
            XML has been replaced by JSON as the primary serialization format. Using the JsonSerializer in .NET offers performance advantages, particularly when caching JsonSerializerOptions. This method enhances speed (1.34x faster) and reduces memory usage. Additionally, adhering to best practices avoids CA1869 rule violations. Consider optimizing your serialization approach for better performance.
Link to article: https://dotnettips.wordpress.com/2025/02/26/microsoft-net-code-analysis-optimizing-json-serialization-with-cached-options/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Harnessing Spargine: Enhancing Your Applications with the CountryRepository to Validate and Retrieve Country Data</title>
      <link>https://www.dotnetramblings.com/post/23_02_2025/23_02_2025_0/</link>
      <pubDate>Sun, 23 Feb 2025 07:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_02_2025/23_02_2025_0/</guid>
      <description>
        
          
            Spargine is an open-source project for .NET 8, providing assemblies and NuGet packages crucial for managing country-specific data such as postal codes and phone numbers. The CountryRepository simplifies data access and validation, streamlining these processes through new features.
Link to article: https://dotnettips.wordpress.com/2025/02/23/harnessing-spargine-enhancing-your-applications-with-the-countryrepository-to-validate-and-retrieve-country-data/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
