<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnettips.wordpress.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/</link>
    <description>Recent content in Dotnettips.wordpress.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 24 Apr 2024 08:01:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/dotnettips.wordpress.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>General Performance: Choosing Between GetValueOrDefault() and Coalesce Operator for Nullable Integers</title>
      <link>https://www.dotnetramblings.com/post/24_04_2024/24_04_2024_12/</link>
      <pubDate>Wed, 24 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/24_04_2024/24_04_2024_12/</guid>
      <description>
        
          
            In dealing with nullable integers and the need for default values, two common approaches are the coalesce operator (??) and GetValueOrDefault(). Alternatively, utilizing HasValue with the conditional operator is demonstrated.
Link to article: https://dotnettips.wordpress.com/2024/04/24/general-performance-choosing-between-getvalueordefault-and-coalesce-operator-for-nullable-integers/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Code It Any Way You Want: Optimal Parameter Passing â€“ Array vs. Params Keyword</title>
      <link>https://www.dotnetramblings.com/post/23_04_2024/23_04_2024_0/</link>
      <pubDate>Tue, 23 Apr 2024 20:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_04_2024/23_04_2024_0/</guid>
      <description>
        
          
            The article explores the performance differences between passing parameters as arrays or using the params keyword in C#. Despite similarities in speed, the author recommends using the params keyword for its ease of use during function calls.
Link to article: https://dotnettips.wordpress.com/2024/04/23/code-it-any-way-you-want-optimal-parameter-passing-array-vs-params-keyword/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Collection Performance: Creating a List&lt;&gt; Using The Task.Parallel Library</title>
      <link>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</link>
      <pubDate>Mon, 22 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/22_04_2024/22_04_2024_12/</guid>
      <description>
        
          
            The post discusses alternative approaches to adding items to a collection using For() or ForEach() from the Task Parallel Library.
Link to article: https://dotnettips.wordpress.com/2024/04/22/collection-performance-creating-a-list-using-the-task-parallel-library/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>String Performance: Appending a Character using the StringBuilder</title>
      <link>https://www.dotnetramblings.com/post/17_04_2024/17_04_2024_9/</link>
      <pubDate>Wed, 17 Apr 2024 08:01:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_04_2024/17_04_2024_9/</guid>
      <description>
        
          
            The use of a single character with a StringBuilder from an ObjectPool can improve performance. Benchmark results show similar overall performance, but without an ObjectPool, using a character becomes more significant. It is recommended to use a character in such cases. EditorConfig setup can check for this issue using dotnet_diagnostic.CA1834.severity = warning.
Link to article: https://dotnettips.wordpress.com/2024/04/17/string-performance-appending-a-character-using-the-stringbuilder/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
