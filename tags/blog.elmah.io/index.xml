<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog.elmah.io on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/blog.elmah.io/</link>
    <description>Recent content in Blog.elmah.io on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 18 Feb 2025 09:10:40 +0100</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/blog.elmah.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leveraging Tuples in C#: Real-World Use Cases</title>
      <link>https://www.dotnetramblings.com/post/18_02_2025/18_02_2025_5/</link>
      <pubDate>Tue, 18 Feb 2025 09:10:40 +0100</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/18_02_2025/18_02_2025_5/</guid>
      <description>
        
          
            Well, using OOP in development is a blessing. We define classes to leverage inheritance and abstraction. We easily represent one object as a model. However, using and maintaining these classes can sometimes be tedious for the developers and the applicationâ€™s memory. You might need to define separate classes or
Link to article: https://blog.elmah.io/leveraging-tuples-in-c-real-world-use-cases/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Unlocking delegate&amp;#x27;s potential in C#</title>
      <link>https://www.dotnetramblings.com/post/11_02_2025/11_02_2025_16/</link>
      <pubDate>Tue, 11 Feb 2025 10:17:42 +0100</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/11_02_2025/11_02_2025_16/</guid>
      <description>
        
          
            Working on event-driven applications can be challenging, where you need to write a large number of methods. Remembering those methods and deciding their usage for every requirement is tedious, especially when methods have different signatures. C# brings delegates to cope with this problem. Delegating is a powerful feature introduced solely
Link to article: https://blog.elmah.io/unlocking-delegates-potential-in-c/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
