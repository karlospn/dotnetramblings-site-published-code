<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog.elmah.io on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/blog.elmah.io/</link>
    <description>Recent content in Blog.elmah.io on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 30 Sep 2025 07:53:58 +0200</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/blog.elmah.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hidden Costs of Boxing in C#: How to Detect and Avoid Them</title>
      <link>https://www.dotnetramblings.com/post/30_09_2025/30_09_2025_10/</link>
      <pubDate>Tue, 30 Sep 2025 07:53:58 +0200</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_09_2025/30_09_2025_10/</guid>
      <description>
        
          
            C# Boxing and Unboxing are vital players in the performance of an application. However, they are often overlooked. They involve heap allocations that bring a penalty due to their accessing mechanism. In today&#39;s post, we will unfold Boxing and Unboxing in detail, study how they are costly to
Link to article: https://blog.elmah.io/hidden-costs-of-boxing-in-c-how-to-detect-and-avoid-them/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
