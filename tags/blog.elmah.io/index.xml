<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog.elmah.io on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/blog.elmah.io/</link>
    <description>Recent content in Blog.elmah.io on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 23 Sep 2025 10:05:05 +0200</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/blog.elmah.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Expression Trees in C#: Building Dynamic LINQ Queries at Runtime</title>
      <link>https://www.dotnetramblings.com/post/23_09_2025/23_09_2025_5/</link>
      <pubDate>Tue, 23 Sep 2025 10:05:05 +0200</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/23_09_2025/23_09_2025_5/</guid>
      <description>
        
          
            Tired of endless if-else blocks just to build queries? What if your LINQ queries could write themselves at runtime? Today, we will unfold expression trees, which can be used to create dynamic queries at runtime. I will show how to use expression trees in your project and understand their advantages
Link to article: https://blog.elmah.io/expression-trees-in-c-building-dynamic-linq-queries-at-runtime/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Demystifying async void in C#: Why It&amp;#x27;s Dangerous and When It&amp;#x27;s Okay</title>
      <link>https://www.dotnetramblings.com/post/16_09_2025/16_09_2025_15/</link>
      <pubDate>Tue, 16 Sep 2025 09:42:03 +0200</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_09_2025/16_09_2025_15/</guid>
      <description>
        
          
            Async operations are an integral part of any application. In C#, mostly asynchronous methods return Task or Task, but there&#39;s also the odd case of async void. We know void is for synchronous operations, so why does C# even allow async void? I will dissect
Link to article: https://blog.elmah.io/demystifying-async-void-in-c-why-its-dangerous-and-when-its-okay/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
