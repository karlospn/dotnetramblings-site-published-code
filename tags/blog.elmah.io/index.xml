<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog.elmah.io on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/blog.elmah.io/</link>
    <description>Recent content in Blog.elmah.io on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 25 Mar 2025 13:16:49 +0100</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/blog.elmah.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding EF Core Change Tracking: How It Works Under the Hood</title>
      <link>https://www.dotnetramblings.com/post/25_03_2025/25_03_2025_13/</link>
      <pubDate>Tue, 25 Mar 2025 13:16:49 +0100</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/25_03_2025/25_03_2025_13/</guid>
      <description>
        
          
            Entity Framework Core (EF Core) makes data handling easy. We all are leveraging its conciseness, flexibility, and rich features in our projects. However, have you ever wondered what goes under the hood? How has EF Core detached us from SQL queries? Today, I will disclose the curtain behind EF Core
Link to article: https://blog.elmah.io/understanding-ef-core-change-tracking-how-it-works-under-the-hood/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
