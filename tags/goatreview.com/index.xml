<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goatreview.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/goatreview.com/</link>
    <description>Recent content in Goatreview.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 05 Nov 2024 09:00:45 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/goatreview.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simplifying Caching with Aspect-Oriented Programming and Metalama in .NET</title>
      <link>https://www.dotnetramblings.com/post/05_11_2024/05_11_2024_0/</link>
      <pubDate>Tue, 05 Nov 2024 09:00:45 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/05_11_2024/05_11_2024_0/</guid>
      <description>
        
          
             Introduction: Simplifying Caching with Aspect-Oriented Programming in .NET Aspect-Oriented Programming (AOP) offers elegant solutions for handling cross-cutting concerns in our .NET applications, such as method caching. In a previous article on GoatReview üêê, we explored using Fody to implement a caching aspect. Although powerful, this tool presents significant challenges. Link to article: https://goatreview.com/simplifying-caching-with-aop-metalama/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Verifying code against architecture with Metalama</title>
      <link>https://www.dotnetramblings.com/post/30_10_2024/30_10_2024_12/</link>
      <pubDate>Wed, 30 Oct 2024 09:00:19 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_10_2024/30_10_2024_12/</guid>
      <description>
        
          
            In my previous article, I demonstrated how Metalama can generate boilerplate code during compilation, automating the repetitive yet necessary tasks. But Metalama doesn‚Äôt stop there. If Metalama were a goat, its second horn would be its ability to validate source code against architectural rules ‚Äî ensuring that your
Link to article: https://goatreview.com/verifying-code-against-architecture-with-metalama/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
