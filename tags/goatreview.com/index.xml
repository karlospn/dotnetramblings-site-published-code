<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goatreview.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/goatreview.com/</link>
    <description>Recent content in Goatreview.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 30 Oct 2024 09:00:19 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/goatreview.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Verifying code against architecture with Metalama</title>
      <link>https://www.dotnetramblings.com/post/30_10_2024/30_10_2024_1/</link>
      <pubDate>Wed, 30 Oct 2024 09:00:19 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/30_10_2024/30_10_2024_1/</guid>
      <description>
        
          
            In my previous article, I demonstrated how Metalama can generate boilerplate code during compilation, automating the repetitive yet necessary tasks. But Metalama doesn’t stop there. If Metalama were a goat, its second horn would be its ability to validate source code against architectural rules — ensuring that your
Link to article: https://goatreview.com/verifying-code-against-architecture-with-metalama/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
