<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code4it.dev on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/code4it.dev/</link>
    <description>Recent content in Code4it.dev on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Tue, 10 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/code4it.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# Tip: Handling exceptions with Task.WaitAll and Task.WhenAll</title>
      <link>https://www.dotnetramblings.com/post/10_06_2025/10_06_2025_18/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_06_2025/10_06_2025_18/</guid>
      <description>
        
          
            Task.WhenAll and Task.WaitAll are common methods in C# that allow you to execute multiple Tasks. Butâ€¦ what happens when an exception is thrown?
Link to article: https://www.code4it.dev/csharptips/task-whenall-vs-task-waitall-error-handling/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
