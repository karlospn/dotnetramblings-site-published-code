<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/docker.com/</link>
    <description>Recent content in Docker.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Wed, 17 Sep 2025 16:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/docker.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Build Secure AI Coding Agents with Cerebras and Docker Compose</title>
      <link>https://www.dotnetramblings.com/post/17_09_2025/17_09_2025_7/</link>
      <pubDate>Wed, 17 Sep 2025 16:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/17_09_2025/17_09_2025_7/</guid>
      <description>
        
          
            In the recent article, Building Isolated AI Code Environments with Cerebras and Docker Compose, our friends at Cerebras showcased how one can build a coding agent to use worlds fastest Cerebras’ AI inference API, Docker Compose, ADK-Python, and MCP servers. In this post, we’ll dive deeper into the underlying technologies and show how the pieces...
Link to article: https://www.docker.com/blog/cerebras-docker-compose-secure-ai-coding-agents/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>MCP Security: A Developer’s Guide</title>
      <link>https://www.dotnetramblings.com/post/16_09_2025/16_09_2025_10/</link>
      <pubDate>Tue, 16 Sep 2025 13:00:30 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/16_09_2025/16_09_2025_10/</guid>
      <description>
        
          
            Since its release by Anthropic in November 2024, Model Context Protocol (MCP) has gained massive adoption and is quickly becoming the connective tissue between AI agents and the tools, APIs, and data they act on. With just a few lines of configuration, an agent can search code, open tickets, query SaaS systems, or even deploy...
Link to article: https://www.docker.com/blog/mcp-security-explained/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>The Nine Rules of AI PoC Success: How to Build Demos That Actually Ship</title>
      <link>https://www.dotnetramblings.com/post/15_09_2025/15_09_2025_8/</link>
      <pubDate>Mon, 15 Sep 2025 13:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_09_2025/15_09_2025_8/</guid>
      <description>
        
          
            That study claiming &amp;quot;95% of AI POCs fail&amp;quot; has been making the rounds. It&#39;s clickbait nonsense, and frankly, it&#39;s not helping anyone. The real number? Nobody knows, because nobody&#39;s tracking it properly. But here&#39;s what I do know after years of watching teams build AI systems: the study masks a much more important problem. Teams...
Link to article: https://www.docker.com/blog/ai-poc-success-rules/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>From Hallucinations to Prompt Injection: Securing AI Workflows at Runtime</title>
      <link>https://www.dotnetramblings.com/post/10_09_2025/10_09_2025_9/</link>
      <pubDate>Wed, 10 Sep 2025 13:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/10_09_2025/10_09_2025_9/</guid>
      <description>
        
          
            How developers are embedding runtime security to safely build with AI agents Introduction: When AI Workflows Become Attack Surfaces The AI tools we use today are powerful, but also unpredictable and exploitable. You prompt an LLM and it generates a Dockerfile. It looks correct. A shell script? Reasonable. You run it in dev. Then something...
Link to article: https://www.docker.com/blog/secure-ai-agents-runtime-security/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
