<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Milanjovanovic.tech on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/milanjovanovic.tech/</link>
    <description>Recent content in Milanjovanovic.tech on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Sat, 08 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/milanjovanovic.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stop Conflating CQRS and MediatR</title>
      <link>https://www.dotnetramblings.com/post/08_02_2025/08_02_2025_0/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_02_2025/08_02_2025_0/</guid>
      <description>
        
          
            The .NET ecosystem has gradually fused CQRS and MediatR together, creating a reflexive assumption that they&#39;re inseparable, but this mental shortcut has led teams down a path of unnecessary complexity. This article dispels common misconceptions by explaining how CQRS and MediatR are distinct tools solving different problems, and demonstrates how to implement CQRS effectively with or without MediatR.
Link to article: https://www.milanjovanovic.tech/blog/stop-conflating-cqrs-and-mediatr 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Overriding Default HTTP Resilience Handlers in .NET</title>
      <link>https://www.dotnetramblings.com/post/01_02_2025/01_02_2025_3/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/01_02_2025/01_02_2025_3/</guid>
      <description>
        
          
            While .NET 8&#39;s standard resilience handlers provide excellent defaults for HTTP clients, they lack built-in support for overriding these handlers for specific endpoints that require different resilience strategies. This article demonstrates how to implement a custom solution for overriding default handlers and discusses upcoming improvements planned by the .NET team.
Link to article: https://www.milanjovanovic.tech/blog/overriding-default-http-resilience-handlers-in-dotnet 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
