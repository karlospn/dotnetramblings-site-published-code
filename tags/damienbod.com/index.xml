<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Damienbod.com on .NET Ramblings</title>
    <link>https://www.dotnetramblings.com/tags/damienbod.com/</link>
    <description>Recent content in Damienbod.com on .NET Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>.NET Ramblings</copyright>
    <lastBuildDate>Mon, 15 Apr 2024 05:03:13 +0000</lastBuildDate><atom:link href="https://www.dotnetramblings.com/tags/damienbod.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement a secure Blazor Web application using OpenID Connect and security headers</title>
      <link>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_13/</link>
      <pubDate>Mon, 15 Apr 2024 05:03:13 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/15_04_2024/15_04_2024_13/</guid>
      <description>
        
          
            This article shows how to implement a secure .NET 8 Blazor Web application using OpenID Connect and security headers with CSP nonces. The NetEscapades.AspNetCore.SecurityHeaders nuget package is used to implement the security headers and OpenIddict is used to implement the OIDC server. Code: https://github.com/damienbod/BlazorWebOidc OpenIddict is used as the identity provider and an OpenID connect […]
Link to article: https://damienbod.com/2024/04/15/implement-a-secure-blazor-web-application-using-openid-connect-and-security-headers/ 
          
          
        
      </description>
    </item>
    
    <item>
      <title>BFF secured ASP.NET Core application using downstream API and an OAuth client credentials JWT</title>
      <link>https://www.dotnetramblings.com/post/08_04_2024/08_04_2024_11/</link>
      <pubDate>Mon, 08 Apr 2024 05:43:18 +0000</pubDate>
      
      <guid>https://www.dotnetramblings.com/post/08_04_2024/08_04_2024_11/</guid>
      <description>
        
          
            This article shows how to implement a web application using backend for frontend security architecture for authentication and consumes data from a downstream API protected using a JWT access token which can only be accessed using an app-to-app access token. The access token is acquired using the OAuth2 client credentials flow and the API does […]
Link to article: https://damienbod.com/2024/04/08/bff-secured-asp-net-core-application-using-downstream-api-and-an-oauth-client-credentials-jwt/ 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
